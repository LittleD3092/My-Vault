
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000158c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001714  08001714  00011714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001724  08001724  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001724  08001724  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001724  08001724  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001724  08001724  00011724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001728  08001728  00011728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800172c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001730  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001730  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000040e2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e27  00000000  00000000  00024116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00024f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00025350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc61  00000000  00000000  000256c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004049  00000000  00000000  00042329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012db3b  00000000  00000000  00046372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173ead  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ef4  00000000  00000000  00173f00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016fc 	.word	0x080016fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080016fc 	.word	0x080016fc

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_ddiv>:
 800041c:	b570      	push	{r4, r5, r6, lr}
 800041e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000422:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000426:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800042a:	bf1d      	ittte	ne
 800042c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000430:	ea94 0f0c 	teqne	r4, ip
 8000434:	ea95 0f0c 	teqne	r5, ip
 8000438:	f000 f8a7 	bleq	800058a <__aeabi_ddiv+0x16e>
 800043c:	eba4 0405 	sub.w	r4, r4, r5
 8000440:	ea81 0e03 	eor.w	lr, r1, r3
 8000444:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f000 8088 	beq.w	8000560 <__aeabi_ddiv+0x144>
 8000450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000454:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000458:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800045c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000460:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000464:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000468:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800046c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000470:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000474:	429d      	cmp	r5, r3
 8000476:	bf08      	it	eq
 8000478:	4296      	cmpeq	r6, r2
 800047a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800047e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000482:	d202      	bcs.n	800048a <__aeabi_ddiv+0x6e>
 8000484:	085b      	lsrs	r3, r3, #1
 8000486:	ea4f 0232 	mov.w	r2, r2, rrx
 800048a:	1ab6      	subs	r6, r6, r2
 800048c:	eb65 0503 	sbc.w	r5, r5, r3
 8000490:	085b      	lsrs	r3, r3, #1
 8000492:	ea4f 0232 	mov.w	r2, r2, rrx
 8000496:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800049a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800049e:	ebb6 0e02 	subs.w	lr, r6, r2
 80004a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004a6:	bf22      	ittt	cs
 80004a8:	1ab6      	subcs	r6, r6, r2
 80004aa:	4675      	movcs	r5, lr
 80004ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80004b0:	085b      	lsrs	r3, r3, #1
 80004b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004be:	bf22      	ittt	cs
 80004c0:	1ab6      	subcs	r6, r6, r2
 80004c2:	4675      	movcs	r5, lr
 80004c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004c8:	085b      	lsrs	r3, r3, #1
 80004ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80004ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80004d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004d6:	bf22      	ittt	cs
 80004d8:	1ab6      	subcs	r6, r6, r2
 80004da:	4675      	movcs	r5, lr
 80004dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004e0:	085b      	lsrs	r3, r3, #1
 80004e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004ee:	bf22      	ittt	cs
 80004f0:	1ab6      	subcs	r6, r6, r2
 80004f2:	4675      	movcs	r5, lr
 80004f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80004f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80004fc:	d018      	beq.n	8000530 <__aeabi_ddiv+0x114>
 80004fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000502:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000506:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800050a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800050e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000512:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000516:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800051a:	d1c0      	bne.n	800049e <__aeabi_ddiv+0x82>
 800051c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000520:	d10b      	bne.n	800053a <__aeabi_ddiv+0x11e>
 8000522:	ea41 0100 	orr.w	r1, r1, r0
 8000526:	f04f 0000 	mov.w	r0, #0
 800052a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800052e:	e7b6      	b.n	800049e <__aeabi_ddiv+0x82>
 8000530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000534:	bf04      	itt	eq
 8000536:	4301      	orreq	r1, r0
 8000538:	2000      	moveq	r0, #0
 800053a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800053e:	bf88      	it	hi
 8000540:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000544:	f63f aeaf 	bhi.w	80002a6 <__aeabi_dmul+0xde>
 8000548:	ebb5 0c03 	subs.w	ip, r5, r3
 800054c:	bf04      	itt	eq
 800054e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000564:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000568:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800056c:	bfc2      	ittt	gt
 800056e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000572:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000576:	bd70      	popgt	{r4, r5, r6, pc}
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f04f 0e00 	mov.w	lr, #0
 8000580:	3c01      	subs	r4, #1
 8000582:	e690      	b.n	80002a6 <__aeabi_dmul+0xde>
 8000584:	ea45 0e06 	orr.w	lr, r5, r6
 8000588:	e68d      	b.n	80002a6 <__aeabi_dmul+0xde>
 800058a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800058e:	ea94 0f0c 	teq	r4, ip
 8000592:	bf08      	it	eq
 8000594:	ea95 0f0c 	teqeq	r5, ip
 8000598:	f43f af3b 	beq.w	8000412 <__aeabi_dmul+0x24a>
 800059c:	ea94 0f0c 	teq	r4, ip
 80005a0:	d10a      	bne.n	80005b8 <__aeabi_ddiv+0x19c>
 80005a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a6:	f47f af34 	bne.w	8000412 <__aeabi_dmul+0x24a>
 80005aa:	ea95 0f0c 	teq	r5, ip
 80005ae:	f47f af25 	bne.w	80003fc <__aeabi_dmul+0x234>
 80005b2:	4610      	mov	r0, r2
 80005b4:	4619      	mov	r1, r3
 80005b6:	e72c      	b.n	8000412 <__aeabi_dmul+0x24a>
 80005b8:	ea95 0f0c 	teq	r5, ip
 80005bc:	d106      	bne.n	80005cc <__aeabi_ddiv+0x1b0>
 80005be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005c2:	f43f aefd 	beq.w	80003c0 <__aeabi_dmul+0x1f8>
 80005c6:	4610      	mov	r0, r2
 80005c8:	4619      	mov	r1, r3
 80005ca:	e722      	b.n	8000412 <__aeabi_dmul+0x24a>
 80005cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005d0:	bf18      	it	ne
 80005d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005d6:	f47f aec5 	bne.w	8000364 <__aeabi_dmul+0x19c>
 80005da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80005de:	f47f af0d 	bne.w	80003fc <__aeabi_dmul+0x234>
 80005e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80005e6:	f47f aeeb 	bne.w	80003c0 <__aeabi_dmul+0x1f8>
 80005ea:	e712      	b.n	8000412 <__aeabi_dmul+0x24a>

080005ec <__aeabi_d2iz>:
 80005ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f4:	d215      	bcs.n	8000622 <__aeabi_d2iz+0x36>
 80005f6:	d511      	bpl.n	800061c <__aeabi_d2iz+0x30>
 80005f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000600:	d912      	bls.n	8000628 <__aeabi_d2iz+0x3c>
 8000602:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800060a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000612:	fa23 f002 	lsr.w	r0, r3, r2
 8000616:	bf18      	it	ne
 8000618:	4240      	negne	r0, r0
 800061a:	4770      	bx	lr
 800061c:	f04f 0000 	mov.w	r0, #0
 8000620:	4770      	bx	lr
 8000622:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000626:	d105      	bne.n	8000634 <__aeabi_d2iz+0x48>
 8000628:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000632:	4770      	bx	lr
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <init_7seg>:
#include "7seg.h"
#include "helper_functions.h"

// Only allow GPIOA and GPIOB and GPIOC for now
// Can easily extended by adding "else if" cases
int init_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(gpio==GPIOA){
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000650:	d106      	bne.n	8000660 <init_7seg+0x24>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <init_7seg+0xf4>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000656:	4a36      	ldr	r2, [pc, #216]	; (8000730 <init_7seg+0xf4>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065e:	e018      	b.n	8000692 <init_7seg+0x56>
	}
	else if(gpio==GPIOB){
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	4a34      	ldr	r2, [pc, #208]	; (8000734 <init_7seg+0xf8>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d106      	bne.n	8000676 <init_7seg+0x3a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000668:	4b31      	ldr	r3, [pc, #196]	; (8000730 <init_7seg+0xf4>)
 800066a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066c:	4a30      	ldr	r2, [pc, #192]	; (8000730 <init_7seg+0xf4>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000674:	e00d      	b.n	8000692 <init_7seg+0x56>
	}
	else if(gpio==GPIOC){
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	4a2f      	ldr	r2, [pc, #188]	; (8000738 <init_7seg+0xfc>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d106      	bne.n	800068c <init_7seg+0x50>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800067e:	4b2c      	ldr	r3, [pc, #176]	; (8000730 <init_7seg+0xf4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a2b      	ldr	r2, [pc, #172]	; (8000730 <init_7seg+0xf4>)
 8000684:	f043 0304 	orr.w	r3, r3, #4
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	e002      	b.n	8000692 <init_7seg+0x56>
	}
	else{
		// Error! Add other cases to suit other GPIO pins
		return -1;
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000690:	e049      	b.n	8000726 <init_7seg+0xea>
	}

	// Set GPIO pins to output mode (01)
	// First Clear bits(&) then set bits(|)
	gpio->MODER &= ~(0b11 << (2*DIN));
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	68ba      	ldr	r2, [r7, #8]
 8000698:	0052      	lsls	r2, r2, #1
 800069a:	2103      	movs	r1, #3
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*DIN));
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	2101      	movs	r1, #1
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	431a      	orrs	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CS));
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	0052      	lsls	r2, r2, #1
 80006c4:	2103      	movs	r1, #3
 80006c6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ca:	43d2      	mvns	r2, r2
 80006cc:	401a      	ands	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CS));
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	0052      	lsls	r2, r2, #1
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	431a      	orrs	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CLK));
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	0052      	lsls	r2, r2, #1
 80006ee:	2103      	movs	r1, #3
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	401a      	ands	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CLK));
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	683a      	ldr	r2, [r7, #0]
 8000702:	0052      	lsls	r2, r2, #1
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	431a      	orrs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	601a      	str	r2, [r3, #0]

	// Close display test
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DISPLAY_TEST, 0x00);
 8000710:	2300      	movs	r3, #0
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	230f      	movs	r3, #15
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	68b9      	ldr	r1, [r7, #8]
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f80c 	bl	800073c <send_7seg>

	return 0;
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	48000400 	.word	0x48000400
 8000738:	48000800 	.word	0x48000800

0800073c <send_7seg>:

void send_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int address, int data){
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
	// The payload to send
	int payload = ((address&0xFF)<<8)|(data&0xFF);
 800074a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074c:	021b      	lsls	r3, r3, #8
 800074e:	b29a      	uxth	r2, r3
 8000750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]

	// Start the sending cycles
	// 16 data-bits + 1 CS signal
	int total_cycles = 16+1;
 8000758:	2311      	movs	r3, #17
 800075a:	617b      	str	r3, [r7, #20]

	for(int a=1;a<=total_cycles;a++){
 800075c:	2301      	movs	r3, #1
 800075e:	61fb      	str	r3, [r7, #28]
 8000760:	e02f      	b.n	80007c2 <send_7seg+0x86>
		// Reset CLK when enter
		reset_gpio(gpio, CLK);
 8000762:	6839      	ldr	r1, [r7, #0]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f000 f957 	bl	8000a18 <reset_gpio>

		// Set DIN according to data except for last cycle(CS)
		if(((payload>>(total_cycles-1-a))&0x1) && a!=total_cycles){
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	69fb      	ldr	r3, [r7, #28]
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	69ba      	ldr	r2, [r7, #24]
 8000774:	fa42 f303 	asr.w	r3, r2, r3
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <send_7seg+0x56>
 8000780:	69fa      	ldr	r2, [r7, #28]
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	429a      	cmp	r2, r3
 8000786:	d004      	beq.n	8000792 <send_7seg+0x56>
			set_gpio(gpio, DIN);
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	68f8      	ldr	r0, [r7, #12]
 800078c:	f000 f930 	bl	80009f0 <set_gpio>
 8000790:	e003      	b.n	800079a <send_7seg+0x5e>
		}
		else{
			reset_gpio(gpio, DIN);
 8000792:	68b9      	ldr	r1, [r7, #8]
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f000 f93f 	bl	8000a18 <reset_gpio>
		}

		// Set CS at last cycle
		if(a==total_cycles){
 800079a:	69fa      	ldr	r2, [r7, #28]
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d104      	bne.n	80007ac <send_7seg+0x70>
			set_gpio(gpio, CS);
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	f000 f923 	bl	80009f0 <set_gpio>
 80007aa:	e003      	b.n	80007b4 <send_7seg+0x78>
		}
		else{
			reset_gpio(gpio, CS);
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	68f8      	ldr	r0, [r7, #12]
 80007b0:	f000 f932 	bl	8000a18 <reset_gpio>
		}

		// Set CLK when leaving (7seg set data at rising edge)
		set_gpio(gpio, CLK);
 80007b4:	6839      	ldr	r1, [r7, #0]
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f000 f91a 	bl	80009f0 <set_gpio>
	for(int a=1;a<=total_cycles;a++){
 80007bc:	69fb      	ldr	r3, [r7, #28]
 80007be:	3301      	adds	r3, #1
 80007c0:	61fb      	str	r3, [r7, #28]
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	697b      	ldr	r3, [r7, #20]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	ddcb      	ble.n	8000762 <send_7seg+0x26>
	}

	return;
 80007ca:	bf00      	nop
}
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <init_7seg_number>:

int init_7seg_number(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b088      	sub	sp, #32
 80007d6:	af02      	add	r7, sp, #8
 80007d8:	60f8      	str	r0, [r7, #12]
 80007da:	60b9      	str	r1, [r7, #8]
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	603b      	str	r3, [r7, #0]
	if(init_7seg(gpio, DIN, CS, CLK) != 0){
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff ff28 	bl	800063c <init_7seg>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <init_7seg_number+0x26>
		// Fail to init 7seg
		return -1;
 80007f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f6:	e031      	b.n	800085c <init_7seg_number+0x8a>
	}
	// Set Decode Mode to Code B decode mode
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DECODE_MODE, 0xFF);
 80007f8:	23ff      	movs	r3, #255	; 0xff
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2309      	movs	r3, #9
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ff98 	bl	800073c <send_7seg>
	// Set Scan Limit to all digits
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_SCAN_LIMIT, 0x07);
 800080c:	2307      	movs	r3, #7
 800080e:	9301      	str	r3, [sp, #4]
 8000810:	230b      	movs	r3, #11
 8000812:	9300      	str	r3, [sp, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	68f8      	ldr	r0, [r7, #12]
 800081c:	f7ff ff8e 	bl	800073c <send_7seg>
	// Wakeup 7seg
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_SHUTDOWN, 0x01);
 8000820:	2301      	movs	r3, #1
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	230c      	movs	r3, #12
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f7ff ff84 	bl	800073c <send_7seg>
	// Clear the digits
	for(int i=1;i<=8;i++){
 8000834:	2301      	movs	r3, #1
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e00c      	b.n	8000854 <init_7seg_number+0x82>
		send_7seg(gpio, DIN, CS, CLK, i, 15);
 800083a:	230f      	movs	r3, #15
 800083c:	9301      	str	r3, [sp, #4]
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	68b9      	ldr	r1, [r7, #8]
 8000848:	68f8      	ldr	r0, [r7, #12]
 800084a:	f7ff ff77 	bl	800073c <send_7seg>
	for(int i=1;i<=8;i++){
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	3301      	adds	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b08      	cmp	r3, #8
 8000858:	ddef      	ble.n	800083a <init_7seg_number+0x68>
	}

	return 0;
 800085a:	2300      	movs	r3, #0
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SevenSeg__init>:
	}
}

// Constructor of SevenSeg
void SevenSeg__init(SevenSeg* self, GPIO_TypeDef* gpio, int DIN, int CS, int CLK)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	60f8      	str	r0, [r7, #12]
 800086c:	60b9      	str	r1, [r7, #8]
 800086e:	607a      	str	r2, [r7, #4]
 8000870:	603b      	str	r3, [r7, #0]
	self->gpio = gpio;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	68ba      	ldr	r2, [r7, #8]
 8000876:	601a      	str	r2, [r3, #0]
	self->DIN = DIN;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	605a      	str	r2, [r3, #4]
	self->CS = CS;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	609a      	str	r2, [r3, #8]
	self->CLK = CLK;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	60da      	str	r2, [r3, #12]
	init_7seg_number(gpio, DIN, CS, CLK);
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	68b8      	ldr	r0, [r7, #8]
 8000892:	f7ff ff9e 	bl	80007d2 <init_7seg_number>
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <SevenSeg__printNum>:
// Precondition: self is a valid pointer to a SevenSeg object
//               num is an integer
// Postcondition: num is displayed on the SevenSeg, then return 0
//                if num exceeds the range of the SevenSeg, return 1
int SevenSeg__printNum(SevenSeg* self, int num)
{
 80008a0:	b5b0      	push	{r4, r5, r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	// overflow
	if(num > 99999999 || num < -9999999)    return -1;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	4a44      	ldr	r2, [pc, #272]	; (80009c0 <SevenSeg__printNum+0x120>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	dc03      	bgt.n	80008ba <SevenSeg__printNum+0x1a>
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	4a43      	ldr	r2, [pc, #268]	; (80009c4 <SevenSeg__printNum+0x124>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	da02      	bge.n	80008c0 <SevenSeg__printNum+0x20>
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008be:	e07a      	b.n	80009b6 <SevenSeg__printNum+0x116>

	int current_digit = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
	// exact zero
	if(num == 0)
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d110      	bne.n	80008ec <SevenSeg__printNum+0x4c>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0, SEG_DATA_DECODE_0);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6818      	ldr	r0, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6859      	ldr	r1, [r3, #4]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	2400      	movs	r4, #0
 80008dc:	9401      	str	r4, [sp, #4]
 80008de:	2401      	movs	r4, #1
 80008e0:	9400      	str	r4, [sp, #0]
 80008e2:	f7ff ff2b 	bl	800073c <send_7seg>
		current_digit++;
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	3301      	adds	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
	}

	// negative
	int negative = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
	if(num < 0)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da2e      	bge.n	8000954 <SevenSeg__printNum+0xb4>
	{
		negative = 1;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
		num = -num;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	425b      	negs	r3, r3
 80008fe:	603b      	str	r3, [r7, #0]
	}

	// print digits
	while(num != 0)
 8000900:	e028      	b.n	8000954 <SevenSeg__printNum+0xb4>
	{
		int digit = num % 10;
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <SevenSeg__printNum+0x128>)
 8000906:	fb83 1302 	smull	r1, r3, r3, r2
 800090a:	1099      	asrs	r1, r3, #2
 800090c:	17d3      	asrs	r3, r2, #31
 800090e:	1ac9      	subs	r1, r1, r3
 8000910:	460b      	mov	r3, r1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	60fb      	str	r3, [r7, #12]
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_0+digit);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6859      	ldr	r1, [r3, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	689c      	ldr	r4, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68dd      	ldr	r5, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	3301      	adds	r3, #1
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	462b      	mov	r3, r5
 8000938:	4622      	mov	r2, r4
 800093a:	f7ff feff 	bl	800073c <send_7seg>
		num /= 10;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <SevenSeg__printNum+0x128>)
 8000942:	fb82 1203 	smull	r1, r2, r2, r3
 8000946:	1092      	asrs	r2, r2, #2
 8000948:	17db      	asrs	r3, r3, #31
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	603b      	str	r3, [r7, #0]
		current_digit++;
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
	while(num != 0)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1d3      	bne.n	8000902 <SevenSeg__printNum+0x62>
	}

	// print negative sign
	if(negative)
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d026      	beq.n	80009ae <SevenSeg__printNum+0x10e>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_DASH);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6818      	ldr	r0, [r3, #0]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6859      	ldr	r1, [r3, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68dc      	ldr	r4, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	3301      	adds	r3, #1
 8000974:	250a      	movs	r5, #10
 8000976:	9501      	str	r5, [sp, #4]
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	4623      	mov	r3, r4
 800097c:	f7ff fede 	bl	800073c <send_7seg>
		current_digit++;
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
	}

	// clear remaining digits
	while(current_digit <= 7)
 8000986:	e012      	b.n	80009ae <SevenSeg__printNum+0x10e>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_BLANK);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6859      	ldr	r1, [r3, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68dc      	ldr	r4, [r3, #12]
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	3301      	adds	r3, #1
 800099c:	250f      	movs	r5, #15
 800099e:	9501      	str	r5, [sp, #4]
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4623      	mov	r3, r4
 80009a4:	f7ff feca 	bl	800073c <send_7seg>
		current_digit++;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	3301      	adds	r3, #1
 80009ac:	617b      	str	r3, [r7, #20]
	while(current_digit <= 7)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	2b07      	cmp	r3, #7
 80009b2:	dde9      	ble.n	8000988 <SevenSeg__printNum+0xe8>
	}

	return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bdb0      	pop	{r4, r5, r7, pc}
 80009be:	bf00      	nop
 80009c0:	05f5e0ff 	.word	0x05f5e0ff
 80009c4:	ff676981 	.word	0xff676981
 80009c8:	66666667 	.word	0x66666667

080009cc <read_gpio>:
#include "helper_functions.h"

int read_gpio(GPIO_TypeDef* gpio, int pin){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	return (gpio->IDR >> pin) & 1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	691a      	ldr	r2, [r3, #16]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	fa22 f303 	lsr.w	r3, r2, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <set_gpio>:
void set_gpio(GPIO_TypeDef* gpio, int pin){
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	gpio->BSRR |= (1 << pin);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	2101      	movs	r1, #1
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	fa01 f202 	lsl.w	r2, r1, r2
 8000a06:	431a      	orrs	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	619a      	str	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <reset_gpio>:
void reset_gpio(GPIO_TypeDef* gpio, int pin){
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
	gpio->BRR |= (1 << pin);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	2101      	movs	r1, #1
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <FPU_init>:
	else{
		reset_gpio(gpio, pin);
	}
}

void FPU_init(){
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
	// Setup FPU
	SCB->CPACR |= (0xF << 20);
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <FPU_init+0x2c>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <FPU_init+0x2c>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a54:	f3bf 8f4f 	dsb	sy
}
 8000a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a5a:	f3bf 8f6f 	isb	sy
}
 8000a5e:	bf00      	nop
	__DSB();
	__ISB();
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <init_keypad>:
	{15, 0, 14, 13}
};

// Only allow GPIOA and GPIOB for now
// Can easily extended by adding "else if" cases
int init_keypad(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
 8000a7c:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(ROW_gpio==GPIOA || COL_gpio==GPIOA){
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a84:	d003      	beq.n	8000a8e <init_keypad+0x1e>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a8c:	d105      	bne.n	8000a9a <init_keypad+0x2a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000a8e:	4b46      	ldr	r3, [pc, #280]	; (8000ba8 <init_keypad+0x138>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a45      	ldr	r2, [pc, #276]	; (8000ba8 <init_keypad+0x138>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if(ROW_gpio==GPIOB || COL_gpio==GPIOB){
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	4a43      	ldr	r2, [pc, #268]	; (8000bac <init_keypad+0x13c>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d003      	beq.n	8000aaa <init_keypad+0x3a>
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4a41      	ldr	r2, [pc, #260]	; (8000bac <init_keypad+0x13c>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d105      	bne.n	8000ab6 <init_keypad+0x46>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000aaa:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <init_keypad+0x138>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a3e      	ldr	r2, [pc, #248]	; (8000ba8 <init_keypad+0x138>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	e039      	b.n	8000b30 <init_keypad+0xc0>
		// Set GPIO pins to output mode (01)
		COL_gpio->MODER &= ~(0b11 << (2*(COL_pin+a)));
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	6839      	ldr	r1, [r7, #0]
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	440a      	add	r2, r1
 8000ac6:	0052      	lsls	r2, r2, #1
 8000ac8:	2103      	movs	r1, #3
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	43d2      	mvns	r2, r2
 8000ad0:	401a      	ands	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	601a      	str	r2, [r3, #0]
		COL_gpio->MODER |= (0b01 << (2*(COL_pin+a)));
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6839      	ldr	r1, [r7, #0]
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	440a      	add	r2, r1
 8000ae0:	0052      	lsls	r2, r2, #1
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to open drain mode (1)
		COL_gpio->OTYPER &= ~(0b1 << (COL_pin+a));
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	440a      	add	r2, r1
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	401a      	ands	r2, r3
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	605a      	str	r2, [r3, #4]
		COL_gpio->OTYPER |= (0b1 << (COL_pin+a));
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	6839      	ldr	r1, [r7, #0]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	440a      	add	r2, r1
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	431a      	orrs	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	605a      	str	r2, [r3, #4]
		// Set Output to high
		set_gpio(COL_gpio, COL_pin+a);
 8000b1c:	683a      	ldr	r2, [r7, #0]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	4413      	add	r3, r2
 8000b22:	4619      	mov	r1, r3
 8000b24:	68b8      	ldr	r0, [r7, #8]
 8000b26:	f7ff ff63 	bl	80009f0 <set_gpio>
	for(int a=0;a<4;a++){
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	ddc2      	ble.n	8000abc <init_keypad+0x4c>
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	e02c      	b.n	8000b96 <init_keypad+0x126>
		// Set GPIO pins to input mode (00)
		ROW_gpio->MODER &= ~(0b11 << (2*(ROW_pin+a)));
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	440a      	add	r2, r1
 8000b46:	0052      	lsls	r2, r2, #1
 8000b48:	2103      	movs	r1, #3
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	43d2      	mvns	r2, r2
 8000b50:	401a      	ands	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	601a      	str	r2, [r3, #0]
		ROW_gpio->MODER |= (0b00 << (2*(ROW_pin+a)));
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to Pull-Down mode (10)
		ROW_gpio->PUPDR &= ~(0b11 << (2*(ROW_pin+a)));
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	440a      	add	r2, r1
 8000b68:	0052      	lsls	r2, r2, #1
 8000b6a:	2103      	movs	r1, #3
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	60da      	str	r2, [r3, #12]
		ROW_gpio->PUPDR |= (0b10 << (2*(ROW_pin+a)));
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	440a      	add	r2, r1
 8000b82:	0052      	lsls	r2, r2, #1
 8000b84:	2102      	movs	r1, #2
 8000b86:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	60da      	str	r2, [r3, #12]
	for(int a=0;a<4;a++){
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	3301      	adds	r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	ddcf      	ble.n	8000b3c <init_keypad+0xcc>
	}

	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	48000400 	.word	0x48000400

08000bb0 <check_keypad_input_multiple>:
	COL_gpio->OTYPER |= (1 << (COL_pin+y));
	// return if the key is pressed(1) or not(0)
	return (cnt > (cycles*0.7));
}

int check_keypad_input_multiple(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b09e      	sub	sp, #120	; 0x78
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
 8000bbc:	603b      	str	r3, [r7, #0]
	// Count the total number of time each input is pressed in a certain period
	int cnt[4][4];
	for(int i=0;i<4;i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	677b      	str	r3, [r7, #116]	; 0x74
 8000bc2:	e015      	b.n	8000bf0 <check_keypad_input_multiple+0x40>
		for(int j=0;j<4;j++){
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8000bc8:	e00c      	b.n	8000be4 <check_keypad_input_multiple+0x34>
			cnt[i][j] = 0;
 8000bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bcc:	009a      	lsls	r2, r3, #2
 8000bce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	3378      	adds	r3, #120	; 0x78
 8000bd6:	443b      	add	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f843 2c64 	str.w	r2, [r3, #-100]
		for(int j=0;j<4;j++){
 8000bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000be0:	3301      	adds	r3, #1
 8000be2:	673b      	str	r3, [r7, #112]	; 0x70
 8000be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	ddef      	ble.n	8000bca <check_keypad_input_multiple+0x1a>
	for(int i=0;i<4;i++){
 8000bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bec:	3301      	adds	r3, #1
 8000bee:	677b      	str	r3, [r7, #116]	; 0x74
 8000bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	dde6      	ble.n	8000bc4 <check_keypad_input_multiple+0x14>
		}
	}
	int cycles = 400;
 8000bf6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bfa:	657b      	str	r3, [r7, #84]	; 0x54
	for(int a=0;a<cycles;a++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c00:	e046      	b.n	8000c90 <check_keypad_input_multiple+0xe0>
		for(int j=0;j<4;j++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c06:	e03d      	b.n	8000c84 <check_keypad_input_multiple+0xd4>
			// Set Column to push-pull mode
			COL_gpio->OTYPER &= ~(1 << (COL_pin+j));
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c10:	440a      	add	r2, r1
 8000c12:	2101      	movs	r1, #1
 8000c14:	fa01 f202 	lsl.w	r2, r1, r2
 8000c18:	43d2      	mvns	r2, r2
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	605a      	str	r2, [r3, #4]
			// Read the whole row
			for(int i=0;i<4;i++){
 8000c20:	2300      	movs	r3, #0
 8000c22:	667b      	str	r3, [r7, #100]	; 0x64
 8000c24:	e01d      	b.n	8000c62 <check_keypad_input_multiple+0xb2>
				cnt[i][j] += read_gpio(ROW_gpio, ROW_pin+i);
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff fecc 	bl	80009cc <read_gpio>
 8000c34:	4601      	mov	r1, r0
 8000c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c38:	009a      	lsls	r2, r3, #2
 8000c3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3c:	4413      	add	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	3378      	adds	r3, #120	; 0x78
 8000c42:	443b      	add	r3, r7
 8000c44:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000c48:	18ca      	adds	r2, r1, r3
 8000c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c4c:	0099      	lsls	r1, r3, #2
 8000c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c50:	440b      	add	r3, r1
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	3378      	adds	r3, #120	; 0x78
 8000c56:	443b      	add	r3, r7
 8000c58:	f843 2c64 	str.w	r2, [r3, #-100]
			for(int i=0;i<4;i++){
 8000c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c5e:	3301      	adds	r3, #1
 8000c60:	667b      	str	r3, [r7, #100]	; 0x64
 8000c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c64:	2b03      	cmp	r3, #3
 8000c66:	ddde      	ble.n	8000c26 <check_keypad_input_multiple+0x76>
			}
			// Set Column back to open drain mode
			COL_gpio->OTYPER |= (1 << (COL_pin+j));
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	6839      	ldr	r1, [r7, #0]
 8000c6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c70:	440a      	add	r2, r1
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	605a      	str	r2, [r3, #4]
		for(int j=0;j<4;j++){
 8000c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c80:	3301      	adds	r3, #1
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	ddbe      	ble.n	8000c08 <check_keypad_input_multiple+0x58>
	for(int a=0;a<cycles;a++){
 8000c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbb4      	blt.n	8000c02 <check_keypad_input_multiple+0x52>
		}
	}
	// Use a int to represent a bitmap of 16 bits
	int res = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	663b      	str	r3, [r7, #96]	; 0x60
	for(int i=3;i>=0;i--){
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ca0:	e01f      	b.n	8000ce2 <check_keypad_input_multiple+0x132>
		for(int j=3;j>=0;j--){
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ca6:	e016      	b.n	8000cd6 <check_keypad_input_multiple+0x126>
			res = (res << 1) | (cnt[i][j] >= 300);
 8000ca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000caa:	005a      	lsls	r2, r3, #1
 8000cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cae:	0099      	lsls	r1, r3, #2
 8000cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cb2:	440b      	add	r3, r1
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	3378      	adds	r3, #120	; 0x78
 8000cb8:	443b      	add	r3, r7
 8000cba:	f853 3c64 	ldr.w	r3, [r3, #-100]
 8000cbe:	f240 112b 	movw	r1, #299	; 0x12b
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	bfcc      	ite	gt
 8000cc6:	2301      	movgt	r3, #1
 8000cc8:	2300      	movle	r3, #0
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	663b      	str	r3, [r7, #96]	; 0x60
		for(int j=3;j>=0;j--){
 8000cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dae5      	bge.n	8000ca8 <check_keypad_input_multiple+0xf8>
	for(int i=3;i>=0;i--){
 8000cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	dadc      	bge.n	8000ca2 <check_keypad_input_multiple+0xf2>
		}
	}
	return res;
 8000ce8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3778      	adds	r7, #120	; 0x78
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <Keypad__construct>:

void Keypad__construct(Keypad* self, GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000cf2:	b480      	push	{r7}
 8000cf4:	b087      	sub	sp, #28
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	603b      	str	r3, [r7, #0]
	self->ROW_gpio = ROW_gpio;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	601a      	str	r2, [r3, #0]
	self->COL_gpio = COL_gpio;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	687a      	ldr	r2, [r7, #4]
 8000d0a:	605a      	str	r2, [r3, #4]
	self->ROW_pin = ROW_pin;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	609a      	str	r2, [r3, #8]
	self->COL_pin = COL_pin;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	60da      	str	r2, [r3, #12]

	for(int i=0;i<4;i++){
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	e01d      	b.n	8000d5a <Keypad__construct+0x68>
		for(int j=0;j<4;j++){
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	e014      	b.n	8000d4e <Keypad__construct+0x5c>
			self->buttons[i][j] = 0;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	0091      	lsls	r1, r2, #2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	440a      	add	r2, r1
 8000d2e:	3204      	adds	r2, #4
 8000d30:	2100      	movs	r1, #0
 8000d32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			self->last_buttons[i][j] = 0;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	0091      	lsls	r1, r2, #2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	440a      	add	r2, r1
 8000d40:	3214      	adds	r2, #20
 8000d42:	2100      	movs	r1, #0
 8000d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j=0;j<4;j++){
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	dde7      	ble.n	8000d24 <Keypad__construct+0x32>
	for(int i=0;i<4;i++){
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	3301      	adds	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	ddde      	ble.n	8000d1e <Keypad__construct+0x2c>
		}
	}
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	371c      	adds	r7, #28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <Keypad__init>:

int Keypad__init(Keypad* self)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
	if(init_keypad(self->ROW_gpio, self->COL_gpio, self->ROW_pin, self->COL_pin) != 0){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6818      	ldr	r0, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6859      	ldr	r1, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	f7ff fe73 	bl	8000a70 <init_keypad>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d002      	beq.n	8000d96 <Keypad__init+0x28>
		return -1;
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d94:	e000      	b.n	8000d98 <Keypad__init+0x2a>
	}
	return 0;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <Keypad__refresh>:

void Keypad__refresh(Keypad* self)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
 8000dac:	e01b      	b.n	8000de6 <Keypad__refresh+0x46>
		for(int j = 0; j < 4; j++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
 8000db2:	e012      	b.n	8000dda <Keypad__refresh+0x3a>
			self->last_buttons[i][j] = self->buttons[i][j];
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	69fa      	ldr	r2, [r7, #28]
 8000db8:	0091      	lsls	r1, r2, #2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	440a      	add	r2, r1
 8000dbe:	3204      	adds	r2, #4
 8000dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69fa      	ldr	r2, [r7, #28]
 8000dc8:	0090      	lsls	r0, r2, #2
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	4402      	add	r2, r0
 8000dce:	3214      	adds	r2, #20
 8000dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j = 0; j < 4; j++)
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	dde9      	ble.n	8000db4 <Keypad__refresh+0x14>
	for(int i = 0; i < 4; i++)
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	3301      	adds	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	dde0      	ble.n	8000dae <Keypad__refresh+0xe>

	int input = check_keypad_input_multiple(self->ROW_gpio, self->COL_gpio, self->ROW_pin, self->COL_pin);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f7ff fed8 	bl	8000bb0 <check_keypad_input_multiple>
 8000e00:	60f8      	str	r0, [r7, #12]

	for(int i = 0; i < 4; i++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e01c      	b.n	8000e42 <Keypad__refresh+0xa2>
		for(int j = 0; j < 4; j++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	e013      	b.n	8000e36 <Keypad__refresh+0x96>
			self->buttons[i][j] = (input >> (i*4+j)) & 1;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	009a      	lsls	r2, r3, #2
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4413      	add	r3, r2
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	fa42 f303 	asr.w	r3, r2, r3
 8000e1c:	f003 0101 	and.w	r1, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	0090      	lsls	r0, r2, #2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4402      	add	r2, r0
 8000e2a:	3204      	adds	r2, #4
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j = 0; j < 4; j++)
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	3301      	adds	r3, #1
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	dde8      	ble.n	8000e0e <Keypad__refresh+0x6e>
	for(int i = 0; i < 4; i++)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	dddf      	ble.n	8000e08 <Keypad__refresh+0x68>
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <Keypad__getChar>:

char Keypad__getChar(Keypad* self)
{
 8000e54:	b490      	push	{r4, r7}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	char chars[4][4] = {
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <Keypad__getChar+0x6c>)
 8000e5e:	f107 0408 	add.w	r4, r7, #8
 8000e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	for(int i = 0; i < 4; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
 8000e6c:	e01e      	b.n	8000eac <Keypad__getChar+0x58>
		for(int j = 0; j < 4; j++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	e015      	b.n	8000ea0 <Keypad__getChar+0x4c>
			if(self->buttons[i][j])
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	0091      	lsls	r1, r2, #2
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	440a      	add	r2, r1
 8000e7e:	3204      	adds	r2, #4
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d008      	beq.n	8000e9a <Keypad__getChar+0x46>
				return chars[i][j];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	3320      	adds	r3, #32
 8000e8e:	19da      	adds	r2, r3, r7
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	4413      	add	r3, r2
 8000e94:	3b18      	subs	r3, #24
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	e00c      	b.n	8000eb4 <Keypad__getChar+0x60>
		for(int j = 0; j < 4; j++)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	dde6      	ble.n	8000e74 <Keypad__getChar+0x20>
	for(int i = 0; i < 4; i++)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	61fb      	str	r3, [r7, #28]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	dddd      	ble.n	8000e6e <Keypad__getChar+0x1a>

	return 0;
 8000eb2:	2300      	movs	r3, #0
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3720      	adds	r7, #32
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc90      	pop	{r4, r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	08001714 	.word	0x08001714
 8000ec4:	00000000 	.word	0x00000000

08000ec8 <main>:
// #define lab_modify_system_clock
// #define lab_counter
#define lab_music_keyboard
// #define lab_music_dutycycle

int main(){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0c2      	sub	sp, #264	; 0x108
 8000ecc:	af02      	add	r7, sp, #8
	// Cause we want to use floating points we need to init FPU
	FPU_init();
 8000ece:	f7ff fdb7 	bl	8000a40 <FPU_init>
#endif

#ifdef lab_music_keyboard

	Speaker speaker;
	Speaker__construct(&speaker, GPIOA, 0, TIM2, 0.5);
 8000ed2:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8000ed6:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80010b8 <main+0x1f0>
 8000eda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000ee4:	f000 f948 	bl	8001178 <Speaker__construct>
	Speaker__init(&speaker);
 8000ee8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 f960 	bl	80011b2 <Speaker__init>

	Keypad keypad;
	Keypad__construct(&keypad, ROW_gpio, COL_gpio, ROW_pin, COL_pin);
 8000ef2:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	2303      	movs	r3, #3
 8000efc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000f00:	496f      	ldr	r1, [pc, #444]	; (80010c0 <main+0x1f8>)
 8000f02:	f7ff fef6 	bl	8000cf2 <Keypad__construct>
	Keypad__init(&keypad);
 8000f06:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff2f 	bl	8000d6e <Keypad__init>

	ToneFrequency tone;
	ToneFrequency__construct(&tone);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 f8d7 	bl	80010c8 <ToneFrequency__construct>

	SevenSeg seg7;
	SevenSeg__init(&seg7, SEG_gpio, DIN_pin, CS_pin, CLK_pin);
 8000f1a:	4638      	mov	r0, r7
 8000f1c:	2305      	movs	r3, #5
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2304      	movs	r3, #4
 8000f22:	2203      	movs	r2, #3
 8000f24:	4967      	ldr	r1, [pc, #412]	; (80010c4 <main+0x1fc>)
 8000f26:	f7ff fc9d 	bl	8000864 <SevenSeg__init>
	SevenSeg__printNum(&seg7, 0);
 8000f2a:	463b      	mov	r3, r7
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fcb6 	bl	80008a0 <SevenSeg__printNum>

	while(1)
	{
		Keypad__refresh(&keypad);
 8000f34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff31 	bl	8000da0 <Keypad__refresh>

		char input = Keypad__getChar(&keypad);
 8000f3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff86 	bl	8000e54 <Keypad__getChar>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		
		if(input == '1')
 8000f4e:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000f52:	2b31      	cmp	r3, #49	; 0x31
 8000f54:	d110      	bne.n	8000f78 <main+0xb0>
		{
			Speaker__play(&speaker, tone.C4);
 8000f56:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f5e:	eeb0 0a47 	vmov.f32	s0, s14
 8000f62:	eef0 0a67 	vmov.f32	s1, s15
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f946 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 1);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	2101      	movs	r1, #1
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fc95 	bl	80008a0 <SevenSeg__printNum>
 8000f76:	e7dd      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '2')
 8000f78:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000f7c:	2b32      	cmp	r3, #50	; 0x32
 8000f7e:	d110      	bne.n	8000fa2 <main+0xda>
		{
			Speaker__play(&speaker, tone.D4);
 8000f80:	ed97 7b06 	vldr	d7, [r7, #24]
 8000f84:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f88:	eeb0 0a47 	vmov.f32	s0, s14
 8000f8c:	eef0 0a67 	vmov.f32	s1, s15
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f931 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 2);
 8000f96:	463b      	mov	r3, r7
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fc80 	bl	80008a0 <SevenSeg__printNum>
 8000fa0:	e7c8      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '3')
 8000fa2:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000fa6:	2b33      	cmp	r3, #51	; 0x33
 8000fa8:	d110      	bne.n	8000fcc <main+0x104>
		{
			Speaker__play(&speaker, tone.E4);
 8000faa:	ed97 7b08 	vldr	d7, [r7, #32]
 8000fae:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fb2:	eeb0 0a47 	vmov.f32	s0, s14
 8000fb6:	eef0 0a67 	vmov.f32	s1, s15
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f91c 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 3);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fc6b 	bl	80008a0 <SevenSeg__printNum>
 8000fca:	e7b3      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '4')
 8000fcc:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000fd0:	2b34      	cmp	r3, #52	; 0x34
 8000fd2:	d110      	bne.n	8000ff6 <main+0x12e>
		{
			Speaker__play(&speaker, tone.F4);
 8000fd4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000fd8:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000fdc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe0:	eef0 0a67 	vmov.f32	s1, s15
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f907 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 4);
 8000fea:	463b      	mov	r3, r7
 8000fec:	2104      	movs	r1, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fc56 	bl	80008a0 <SevenSeg__printNum>
 8000ff4:	e79e      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '5')
 8000ff6:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8000ffa:	2b35      	cmp	r3, #53	; 0x35
 8000ffc:	d110      	bne.n	8001020 <main+0x158>
		{
			Speaker__play(&speaker, tone.G4);
 8000ffe:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001002:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001006:	eeb0 0a47 	vmov.f32	s0, s14
 800100a:	eef0 0a67 	vmov.f32	s1, s15
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f8f2 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 5);
 8001014:	463b      	mov	r3, r7
 8001016:	2105      	movs	r1, #5
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fc41 	bl	80008a0 <SevenSeg__printNum>
 800101e:	e789      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '6')
 8001020:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001024:	2b36      	cmp	r3, #54	; 0x36
 8001026:	d110      	bne.n	800104a <main+0x182>
		{
			Speaker__play(&speaker, tone.A4);
 8001028:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800102c:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001030:	eeb0 0a47 	vmov.f32	s0, s14
 8001034:	eef0 0a67 	vmov.f32	s1, s15
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f8dd 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 6);
 800103e:	463b      	mov	r3, r7
 8001040:	2106      	movs	r1, #6
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fc2c 	bl	80008a0 <SevenSeg__printNum>
 8001048:	e774      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '7')
 800104a:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 800104e:	2b37      	cmp	r3, #55	; 0x37
 8001050:	d110      	bne.n	8001074 <main+0x1ac>
		{
			Speaker__play(&speaker, tone.B4);
 8001052:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001056:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800105a:	eeb0 0a47 	vmov.f32	s0, s14
 800105e:	eef0 0a67 	vmov.f32	s1, s15
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f8c8 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 7);
 8001068:	463b      	mov	r3, r7
 800106a:	2107      	movs	r1, #7
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fc17 	bl	80008a0 <SevenSeg__printNum>
 8001072:	e75f      	b.n	8000f34 <main+0x6c>
		}
		else if(input == '8')
 8001074:	f897 30ff 	ldrb.w	r3, [r7, #255]	; 0xff
 8001078:	2b38      	cmp	r3, #56	; 0x38
 800107a:	d110      	bne.n	800109e <main+0x1d6>
		{
			Speaker__play(&speaker, tone.C5);
 800107c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001080:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001084:	eeb0 0a47 	vmov.f32	s0, s14
 8001088:	eef0 0a67 	vmov.f32	s1, s15
 800108c:	4618      	mov	r0, r3
 800108e:	f000 f8b3 	bl	80011f8 <Speaker__play>
			SevenSeg__printNum(&seg7, 8);
 8001092:	463b      	mov	r3, r7
 8001094:	2108      	movs	r1, #8
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fc02 	bl	80008a0 <SevenSeg__printNum>
 800109c:	e74a      	b.n	8000f34 <main+0x6c>
		}
		else
		{
			Speaker__stop(&speaker);
 800109e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f8e4 	bl	8001270 <Speaker__stop>
			SevenSeg__printNum(&seg7, 0);
 80010a8:	463b      	mov	r3, r7
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fbf7 	bl	80008a0 <SevenSeg__printNum>
	{
 80010b2:	e73f      	b.n	8000f34 <main+0x6c>
 80010b4:	f3af 8000 	nop.w
 80010b8:	00000000 	.word	0x00000000
 80010bc:	3fe00000 	.word	0x3fe00000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800

080010c8 <ToneFrequency__construct>:
#include "speaker.h"

void ToneFrequency__construct(ToneFrequency* self)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    self->C4 = 261.6;
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	a321      	add	r3, pc, #132	; (adr r3, 8001158 <ToneFrequency__construct+0x90>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	e9c1 2300 	strd	r2, r3, [r1]
    self->D4 = 293.7;
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	a320      	add	r3, pc, #128	; (adr r3, 8001160 <ToneFrequency__construct+0x98>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    self->E4 = 329.6;
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	a31f      	add	r3, pc, #124	; (adr r3, 8001168 <ToneFrequency__construct+0xa0>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	e9c1 2304 	strd	r2, r3, [r1, #16]
    self->F4 = 349.2;
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	a31e      	add	r3, pc, #120	; (adr r3, 8001170 <ToneFrequency__construct+0xa8>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    self->G4 = 392.0;
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <ToneFrequency__construct+0x88>)
 8001108:	e9c1 2308 	strd	r2, r3, [r1, #32]
    self->A4 = 440.0;
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	f04f 0200 	mov.w	r2, #0
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <ToneFrequency__construct+0x8c>)
 8001114:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    self->B4 = 493.9;
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	a309      	add	r3, pc, #36	; (adr r3, 8001140 <ToneFrequency__construct+0x78>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    self->C5 = 523.3;
 8001124:	6879      	ldr	r1, [r7, #4]
 8001126:	a308      	add	r3, pc, #32	; (adr r3, 8001148 <ToneFrequency__construct+0x80>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	f3af 8000 	nop.w
 8001140:	66666666 	.word	0x66666666
 8001144:	407ede66 	.word	0x407ede66
 8001148:	66666666 	.word	0x66666666
 800114c:	40805a66 	.word	0x40805a66
 8001150:	40788000 	.word	0x40788000
 8001154:	407b8000 	.word	0x407b8000
 8001158:	9999999a 	.word	0x9999999a
 800115c:	40705999 	.word	0x40705999
 8001160:	33333333 	.word	0x33333333
 8001164:	40725b33 	.word	0x40725b33
 8001168:	9999999a 	.word	0x9999999a
 800116c:	40749999 	.word	0x40749999
 8001170:	33333333 	.word	0x33333333
 8001174:	4075d333 	.word	0x4075d333

08001178 <Speaker__construct>:

void Speaker__construct(Speaker *self, GPIO_TypeDef *gpio, int pin, TIM_TypeDef *timer, double dutyCycle)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6178      	str	r0, [r7, #20]
 8001180:	6139      	str	r1, [r7, #16]
 8001182:	60fa      	str	r2, [r7, #12]
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	ed87 0b00 	vstr	d0, [r7]
    self->gpio = gpio;
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	601a      	str	r2, [r3, #0]
    self->pin = pin;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	605a      	str	r2, [r3, #4]
    self->timer = timer;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	609a      	str	r2, [r3, #8]
    self->dutyCycle = dutyCycle;
 800119c:	6979      	ldr	r1, [r7, #20]
 800119e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80011a6:	bf00      	nop
 80011a8:	371c      	adds	r7, #28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <Speaker__init>:

int Speaker__init(Speaker *self)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
    // config system clock
    SystemClock_Config(40);
 80011ba:	2028      	movs	r0, #40	; 0x28
 80011bc:	f000 f8a2 	bl	8001304 <SystemClock_Config>
    // self->timer->PSC = 0;

    // // timer start
    // timer_start(self->timer);

    GPIO_init_AF();
 80011c0:	f000 f9ba 	bl	8001538 <GPIO_init_AF>
    timer_enable(self->timer);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f965 	bl	8001498 <timer_enable>
    timer_init(self->timer, 1, 20);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2214      	movs	r2, #20
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f982 	bl	80014e0 <timer_init>
    PWM_channel_init();
 80011dc:	f000 f9dc 	bl	8001598 <PWM_channel_init>
    timer_start(self->timer);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f997 	bl	8001518 <timer_start>

    return 0;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	0000      	movs	r0, r0
	...

080011f8 <Speaker__play>:

void Speaker__play(Speaker *self, double freq)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	ed87 0b00 	vstr	d0, [r7]
    self->timer->ARR = (int)(40000000.0 / freq);
 8001204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001208:	a117      	add	r1, pc, #92	; (adr r1, 8001268 <Speaker__play+0x70>)
 800120a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800120e:	f7ff f905 	bl	800041c <__aeabi_ddiv>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff f9e7 	bl	80005ec <__aeabi_d2iz>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	62da      	str	r2, [r3, #44]	; 0x2c
    self->timer->CCR1 = (int)(self->dutyCycle * 40000000.0 / freq);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800122c:	a30e      	add	r3, pc, #56	; (adr r3, 8001268 <Speaker__play+0x70>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7fe ffc9 	bl	80001c8 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001242:	f7ff f8eb 	bl	800041c <__aeabi_ddiv>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f7ff f9cd 	bl	80005ec <__aeabi_d2iz>
 8001252:	4602      	mov	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	f3af 8000 	nop.w
 8001268:	00000000 	.word	0x00000000
 800126c:	418312d0 	.word	0x418312d0

08001270 <Speaker__stop>:

void Speaker__stop(Speaker *self)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    self->timer->CCR1 = 0;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2200      	movs	r2, #0
 800127e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <NMI_Handler+0x4>

08001292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <HardFault_Handler+0x4>

08001298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <MemManage_Handler+0x4>

0800129e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <UsageFault_Handler+0x4>

080012aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d8:	f000 f9d8 	bl	800168c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}

080012e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <SystemInit+0x20>)
 80012e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ea:	4a05      	ldr	r2, [pc, #20]	; (8001300 <SystemInit+0x20>)
 80012ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <SystemClock_Config>:
#include "timer.h"

// 1 6 10 16 40
void SystemClock_Config(int speed){
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	// system clock -> MSI
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 800130c:	4b61      	ldr	r3, [pc, #388]	; (8001494 <SystemClock_Config+0x190>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	4a60      	ldr	r2, [pc, #384]	; (8001494 <SystemClock_Config+0x190>)
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_MSI;
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <SystemClock_Config+0x190>)
 800131a:	4a5e      	ldr	r2, [pc, #376]	; (8001494 <SystemClock_Config+0x190>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	6093      	str	r3, [r2, #8]

	while(!(((RCC->CFGR & RCC_CFGR_SWS_Msk)>> RCC_CFGR_SWS_Pos) == 0));    // Make sure system clock is ready
 8001320:	bf00      	nop
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <SystemClock_Config+0x190>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1f8      	bne.n	8001322 <SystemClock_Config+0x1e>

	RCC->CR &= ~RCC_CR_PLLON;                 // Disable PLL
 8001330:	4b58      	ldr	r3, [pc, #352]	; (8001494 <SystemClock_Config+0x190>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a57      	ldr	r2, [pc, #348]	; (8001494 <SystemClock_Config+0x190>)
 8001336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800133a:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) != 0);    // Make sure PLL is ready (unlocked)
 800133c:	bf00      	nop
 800133e:	4b55      	ldr	r3, [pc, #340]	; (8001494 <SystemClock_Config+0x190>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <SystemClock_Config+0x3a>

	// Set PLL to MSI
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC_Msk;
 800134a:	4b52      	ldr	r3, [pc, #328]	; (8001494 <SystemClock_Config+0x190>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	4a51      	ldr	r2, [pc, #324]	; (8001494 <SystemClock_Config+0x190>)
 8001350:	f023 0303 	bic.w	r3, r3, #3
 8001354:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_MSI;
 8001356:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <SystemClock_Config+0x190>)
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <SystemClock_Config+0x190>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	60d3      	str	r3, [r2, #12]

	// R / 0~3  2,4,6,8
	// N * 8~86 8~86
	// M / 0~7  1~8
	// initial
	int set_R=0, set_N=0, set_M=0;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
	// Change R N M
	if(speed==40){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b28      	cmp	r3, #40	; 0x28
 8001372:	d106      	bne.n	8001382 <SystemClock_Config+0x7e>
		set_R = 1;
 8001374:	2301      	movs	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
		set_N = 40;
 8001378:	2328      	movs	r3, #40	; 0x28
 800137a:	613b      	str	r3, [r7, #16]
		set_M = 0;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	e037      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else if(speed==20){
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b14      	cmp	r3, #20
 8001386:	d106      	bne.n	8001396 <SystemClock_Config+0x92>
		set_R = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
		set_N = 10;
 800138c:	230a      	movs	r3, #10
 800138e:	613b      	str	r3, [r7, #16]
		set_M = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e02d      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else if(speed==16){
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b10      	cmp	r3, #16
 800139a:	d106      	bne.n	80013aa <SystemClock_Config+0xa6>
		set_R = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
		set_N = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	613b      	str	r3, [r7, #16]
		set_M = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	e023      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else if(speed==10){
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b0a      	cmp	r3, #10
 80013ae:	d106      	bne.n	80013be <SystemClock_Config+0xba>
		set_R = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
		set_N = 5;
 80013b4:	2305      	movs	r3, #5
 80013b6:	613b      	str	r3, [r7, #16]
		set_M = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e019      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else if(speed==6){
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b06      	cmp	r3, #6
 80013c2:	d106      	bne.n	80013d2 <SystemClock_Config+0xce>
		set_R = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
		set_N = 12;
 80013c8:	230c      	movs	r3, #12
 80013ca:	613b      	str	r3, [r7, #16]
		set_M = 3;
 80013cc:	2303      	movs	r3, #3
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e00f      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else if(speed==1){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d106      	bne.n	80013e6 <SystemClock_Config+0xe2>
		set_R = 3;
 80013d8:	2303      	movs	r3, #3
 80013da:	617b      	str	r3, [r7, #20]
		set_N = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	613b      	str	r3, [r7, #16]
		set_M = 3;
 80013e0:	2303      	movs	r3, #3
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e005      	b.n	80013f2 <SystemClock_Config+0xee>
	}
	else{
		// Default 4 MHz
		set_R = 3;
 80013e6:	2303      	movs	r3, #3
 80013e8:	617b      	str	r3, [r7, #20]
		set_N = 8;
 80013ea:	2308      	movs	r3, #8
 80013ec:	613b      	str	r3, [r7, #16]
		set_M = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
	}

	// Set PLLR
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR_Msk;
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <SystemClock_Config+0x190>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <SystemClock_Config+0x190>)
 80013f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80013fc:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_R << RCC_PLLCFGR_PLLR_Pos);
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <SystemClock_Config+0x190>)
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	0652      	lsls	r2, r2, #25
 8001406:	4611      	mov	r1, r2
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <SystemClock_Config+0x190>)
 800140a:	430b      	orrs	r3, r1
 800140c:	60d3      	str	r3, [r2, #12]
	// Set PLLN
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_Msk;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <SystemClock_Config+0x190>)
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <SystemClock_Config+0x190>)
 8001414:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001418:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_N << RCC_PLLCFGR_PLLN_Pos);
 800141a:	4b1e      	ldr	r3, [pc, #120]	; (8001494 <SystemClock_Config+0x190>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	0212      	lsls	r2, r2, #8
 8001422:	4611      	mov	r1, r2
 8001424:	4a1b      	ldr	r2, [pc, #108]	; (8001494 <SystemClock_Config+0x190>)
 8001426:	430b      	orrs	r3, r1
 8001428:	60d3      	str	r3, [r2, #12]
	// Set PLLM
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM_Msk;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <SystemClock_Config+0x190>)
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	4a19      	ldr	r2, [pc, #100]	; (8001494 <SystemClock_Config+0x190>)
 8001430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001434:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_M << RCC_PLLCFGR_PLLM_Pos);
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <SystemClock_Config+0x190>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	4611      	mov	r1, r2
 8001440:	4a14      	ldr	r2, [pc, #80]	; (8001494 <SystemClock_Config+0x190>)
 8001442:	430b      	orrs	r3, r1
 8001444:	60d3      	str	r3, [r2, #12]

	// Enable PLLR
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <SystemClock_Config+0x190>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <SystemClock_Config+0x190>)
 800144c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001450:	60d3      	str	r3, [r2, #12]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <SystemClock_Config+0x190>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <SystemClock_Config+0x190>)
 8001458:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145c:	6013      	str	r3, [r2, #0]

	// system clock -> PLL
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <SystemClock_Config+0x190>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4a0c      	ldr	r2, [pc, #48]	; (8001494 <SystemClock_Config+0x190>)
 8001464:	f023 0303 	bic.w	r3, r3, #3
 8001468:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <SystemClock_Config+0x190>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	4a09      	ldr	r2, [pc, #36]	; (8001494 <SystemClock_Config+0x190>)
 8001470:	f043 0303 	orr.w	r3, r3, #3
 8001474:	6093      	str	r3, [r2, #8]

	while(!(((RCC->CFGR & RCC_CFGR_SWS_Msk)>>RCC_CFGR_SWS_Pos) == 3));    // Make sure system clock is ready
 8001476:	bf00      	nop
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <SystemClock_Config+0x190>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	089b      	lsrs	r3, r3, #2
 800147e:	f003 0303 	and.w	r3, r3, #3
 8001482:	2b03      	cmp	r3, #3
 8001484:	d1f8      	bne.n	8001478 <SystemClock_Config+0x174>
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <timer_enable>:

void timer_enable(TIM_TypeDef *timer){
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(timer==TIM2){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a6:	d106      	bne.n	80014b6 <timer_enable+0x1e>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;    // TIM2 clock enable
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <timer_enable+0x40>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <timer_enable+0x40>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6593      	str	r3, [r2, #88]	; 0x58
	}
	else if(timer==TIM3){
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
	}
}
 80014b4:	e009      	b.n	80014ca <timer_enable+0x32>
	else if(timer==TIM3){
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <timer_enable+0x44>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d105      	bne.n	80014ca <timer_enable+0x32>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <timer_enable+0x40>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <timer_enable+0x40>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6593      	str	r3, [r2, #88]	; 0x58
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40000400 	.word	0x40000400

080014e0 <timer_init>:
	else if(timer==TIM3){
		RCC->APB1ENR1 &= ~RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
	}
}

void timer_init(TIM_TypeDef *timer, int psc, int arr){
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	timer->PSC = (uint32_t)(psc-1);          // PreScalser
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	461a      	mov	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
	timer->ARR = (uint32_t)(arr-1);          // Reload value
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->EGR |= TIM_EGR_UG;                // Reinitialize the counter
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	615a      	str	r2, [r3, #20]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <timer_start>:
void timer_reload(TIM_TypeDef *timer){
	timer->EGR |= TIM_EGR_UG;
}
void timer_start(TIM_TypeDef *timer){
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;              // Set counter enabled
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <GPIO_init_AF>:
	timer->CR1 &= ~TIM_CR1_CEN;             // Set counter disabled
}

// USE PA0 as the PWM signal output
// USE TIM2 as clock
void GPIO_init_AF(){
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <GPIO_init_AF+0x5c>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <GPIO_init_AF+0x5c>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Set to Alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODE0_Msk;
 8001548:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << GPIO_MODER_MODE0_Pos);
 8001558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001562:	f043 0302 	orr.w	r3, r3, #2
 8001566:	6013      	str	r3, [r2, #0]
	// Set AFRL
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL0_Msk;
 8001568:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001572:	f023 030f 	bic.w	r3, r3, #15
 8001576:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL0_Pos);
 8001578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6213      	str	r3, [r2, #32]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <PWM_channel_init>:

void PWM_channel_init(){
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	// p.883 915 920 924
	// PA0 for PWM
	// PWM mode 1
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1M_Msk;
 800159c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ae:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos);
 80015b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015be:	6193      	str	r3, [r2, #24]
	// OCPreload_Enable
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1PE_Msk;
 80015c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ca:	f023 0308 	bic.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1 << TIM_CCMR1_OC1PE_Pos);
 80015d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015da:	f043 0308 	orr.w	r3, r3, #8
 80015de:	6193      	str	r3, [r2, #24]
	// Active high for channel 1 polarity
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 80015e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ea:	f023 0302 	bic.w	r3, r3, #2
 80015ee:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (0 << TIM_CCER_CC1P_Pos);
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	6213      	str	r3, [r2, #32]
	// Enable for channel 1 output
	TIM2->CCER &= ~TIM_CCER_CC1E_Msk;
 80015fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001600:	6a1b      	ldr	r3, [r3, #32]
 8001602:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1 << TIM_CCER_CC1E_Pos);
 800160c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
	// Set Compare Register
	TIM2->CCR1 = 10;
 800161c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001620:	220a      	movs	r2, #10
 8001622:	635a      	str	r2, [r3, #52]	; 0x34
	// Set PreScaler
	TIM2->PSC = 0;
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	2200      	movs	r2, #0
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
	...

08001638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800163c:	f7ff fe50 	bl	80012e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <LoopForever+0x6>)
  ldr r1, =_edata
 8001642:	490d      	ldr	r1, [pc, #52]	; (8001678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001644:	4a0d      	ldr	r2, [pc, #52]	; (800167c <LoopForever+0xe>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001648:	e002      	b.n	8001650 <LoopCopyDataInit>

0800164a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800164c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164e:	3304      	adds	r3, #4

08001650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001654:	d3f9      	bcc.n	800164a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001658:	4c0a      	ldr	r4, [pc, #40]	; (8001684 <LoopForever+0x16>)
  movs r3, #0
 800165a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800165c:	e001      	b.n	8001662 <LoopFillZerobss>

0800165e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001660:	3204      	adds	r2, #4

08001662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001664:	d3fb      	bcc.n	800165e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001666:	f000 f825 	bl	80016b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800166a:	f7ff fc2d 	bl	8000ec8 <main>

0800166e <LoopForever>:

LoopForever:
    b LoopForever
 800166e:	e7fe      	b.n	800166e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001670:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800167c:	0800172c 	.word	0x0800172c
  ldr r2, =_sbss
 8001680:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001684:	20000024 	.word	0x20000024

08001688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC1_2_IRQHandler>
	...

0800168c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x20>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x24>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a04      	ldr	r2, [pc, #16]	; (80016b0 <HAL_IncTick+0x24>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000020 	.word	0x20000020

080016b4 <__libc_init_array>:
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	4d0d      	ldr	r5, [pc, #52]	; (80016ec <__libc_init_array+0x38>)
 80016b8:	4c0d      	ldr	r4, [pc, #52]	; (80016f0 <__libc_init_array+0x3c>)
 80016ba:	1b64      	subs	r4, r4, r5
 80016bc:	10a4      	asrs	r4, r4, #2
 80016be:	2600      	movs	r6, #0
 80016c0:	42a6      	cmp	r6, r4
 80016c2:	d109      	bne.n	80016d8 <__libc_init_array+0x24>
 80016c4:	4d0b      	ldr	r5, [pc, #44]	; (80016f4 <__libc_init_array+0x40>)
 80016c6:	4c0c      	ldr	r4, [pc, #48]	; (80016f8 <__libc_init_array+0x44>)
 80016c8:	f000 f818 	bl	80016fc <_init>
 80016cc:	1b64      	subs	r4, r4, r5
 80016ce:	10a4      	asrs	r4, r4, #2
 80016d0:	2600      	movs	r6, #0
 80016d2:	42a6      	cmp	r6, r4
 80016d4:	d105      	bne.n	80016e2 <__libc_init_array+0x2e>
 80016d6:	bd70      	pop	{r4, r5, r6, pc}
 80016d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80016dc:	4798      	blx	r3
 80016de:	3601      	adds	r6, #1
 80016e0:	e7ee      	b.n	80016c0 <__libc_init_array+0xc>
 80016e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80016e6:	4798      	blx	r3
 80016e8:	3601      	adds	r6, #1
 80016ea:	e7f2      	b.n	80016d2 <__libc_init_array+0x1e>
 80016ec:	08001724 	.word	0x08001724
 80016f0:	08001724 	.word	0x08001724
 80016f4:	08001724 	.word	0x08001724
 80016f8:	08001728 	.word	0x08001728

080016fc <_init>:
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	bf00      	nop
 8001700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001702:	bc08      	pop	{r3}
 8001704:	469e      	mov	lr, r3
 8001706:	4770      	bx	lr

08001708 <_fini>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	bf00      	nop
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr
