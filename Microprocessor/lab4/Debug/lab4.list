
lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ebc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001044  08001044  00011044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001084  08001084  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001084  08001084  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001084  08001084  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001084  08001084  00011084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800108c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08001090  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08001090  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028f4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009f2  00000000  00000000  00022928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e8  00000000  00000000  00023320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000270  00000000  00000000  00023608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca9d  00000000  00000000  00023878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000321c  00000000  00000000  00040315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d7ad  00000000  00000000  00043531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b60  00000000  00000000  00170d30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800102c 	.word	0x0800102c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800102c 	.word	0x0800102c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <init_7seg>:
#include "7seg.h"
#include "helper_functions.h"

// Only allow GPIOA and GPIOB and GPIOC for now
// Can easily extended by adding "else if" cases
int init_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af02      	add	r7, sp, #8
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
 80008b0:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(gpio==GPIOA){
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80008b8:	d106      	bne.n	80008c8 <init_7seg+0x24>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80008ba:	4b37      	ldr	r3, [pc, #220]	; (8000998 <init_7seg+0xf4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a36      	ldr	r2, [pc, #216]	; (8000998 <init_7seg+0xf4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	e018      	b.n	80008fa <init_7seg+0x56>
	}
	else if(gpio==GPIOB){
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4a34      	ldr	r2, [pc, #208]	; (800099c <init_7seg+0xf8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <init_7seg+0x3a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <init_7seg+0xf4>)
 80008d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d4:	4a30      	ldr	r2, [pc, #192]	; (8000998 <init_7seg+0xf4>)
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008dc:	e00d      	b.n	80008fa <init_7seg+0x56>
	}
	else if(gpio==GPIOC){
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4a2f      	ldr	r2, [pc, #188]	; (80009a0 <init_7seg+0xfc>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <init_7seg+0x50>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <init_7seg+0xf4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a2b      	ldr	r2, [pc, #172]	; (8000998 <init_7seg+0xf4>)
 80008ec:	f043 0304 	orr.w	r3, r3, #4
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	e002      	b.n	80008fa <init_7seg+0x56>
	}
	else{
		// Error! Add other cases to suit other GPIO pins
		return -1;
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008f8:	e049      	b.n	800098e <init_7seg+0xea>
	}

	// Set GPIO pins to output mode (01)
	// First Clear bits(&) then set bits(|)
	gpio->MODER &= ~(0b11 << (2*DIN));
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	0052      	lsls	r2, r2, #1
 8000902:	2103      	movs	r1, #3
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*DIN));
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	68ba      	ldr	r2, [r7, #8]
 8000916:	0052      	lsls	r2, r2, #1
 8000918:	2101      	movs	r1, #1
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	431a      	orrs	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CS));
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	2103      	movs	r1, #3
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	43d2      	mvns	r2, r2
 8000934:	401a      	ands	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CS));
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	0052      	lsls	r2, r2, #1
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	431a      	orrs	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CLK));
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	683a      	ldr	r2, [r7, #0]
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	2103      	movs	r1, #3
 8000958:	fa01 f202 	lsl.w	r2, r1, r2
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CLK));
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	0052      	lsls	r2, r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	fa01 f202 	lsl.w	r2, r1, r2
 8000972:	431a      	orrs	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	601a      	str	r2, [r3, #0]

	// Close display test
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DISPLAY_TEST, 0x00);
 8000978:	2300      	movs	r3, #0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	230f      	movs	r3, #15
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	68b9      	ldr	r1, [r7, #8]
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f80c 	bl	80009a4 <send_7seg>

	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	48000400 	.word	0x48000400
 80009a0:	48000800 	.word	0x48000800

080009a4 <send_7seg>:

void send_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int address, int data){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	603b      	str	r3, [r7, #0]
	// The payload to send
	int payload = ((address&0xFF)<<8)|(data&0xFF);
 80009b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b4:	021b      	lsls	r3, r3, #8
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	4313      	orrs	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]

	// Start the sending cycles
	// 16 data-bits + 1 CS signal
	int total_cycles = 16+1;
 80009c0:	2311      	movs	r3, #17
 80009c2:	617b      	str	r3, [r7, #20]

	for(int a=1;a<=total_cycles;a++){
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	e02f      	b.n	8000a2a <send_7seg+0x86>
		// Reset CLK when enter
		reset_gpio(gpio, CLK);
 80009ca:	6839      	ldr	r1, [r7, #0]
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f000 f8b3 	bl	8000b38 <reset_gpio>

		// Set DIN according to data except for last cycle(CS)
		if(((payload>>(total_cycles-1-a))&0x1) && a!=total_cycles){
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	1e5a      	subs	r2, r3, #1
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	fa42 f303 	asr.w	r3, r2, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <send_7seg+0x56>
 80009e8:	69fa      	ldr	r2, [r7, #28]
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d004      	beq.n	80009fa <send_7seg+0x56>
			set_gpio(gpio, DIN);
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f000 f88c 	bl	8000b10 <set_gpio>
 80009f8:	e003      	b.n	8000a02 <send_7seg+0x5e>
		}
		else{
			reset_gpio(gpio, DIN);
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 f89b 	bl	8000b38 <reset_gpio>
		}

		// Set CS at last cycle
		if(a==total_cycles){
 8000a02:	69fa      	ldr	r2, [r7, #28]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d104      	bne.n	8000a14 <send_7seg+0x70>
			set_gpio(gpio, CS);
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f000 f87f 	bl	8000b10 <set_gpio>
 8000a12:	e003      	b.n	8000a1c <send_7seg+0x78>
		}
		else{
			reset_gpio(gpio, CS);
 8000a14:	6879      	ldr	r1, [r7, #4]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f88e 	bl	8000b38 <reset_gpio>
		}

		// Set CLK when leaving (7seg set data at rising edge)
		set_gpio(gpio, CLK);
 8000a1c:	6839      	ldr	r1, [r7, #0]
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f876 	bl	8000b10 <set_gpio>
	for(int a=1;a<=total_cycles;a++){
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	3301      	adds	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	ddcb      	ble.n	80009ca <send_7seg+0x26>
	}

	return;
 8000a32:	bf00      	nop
}
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <display_number>:

int display_number(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int num, int num_digs){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
 8000a48:	603b      	str	r3, [r7, #0]
	for(int i=1;i<=num_digs;i++){
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	617b      	str	r3, [r7, #20]
 8000a4e:	e01f      	b.n	8000a90 <display_number+0x54>
		send_7seg(gpio, DIN, CS, CLK, i, num % 10);
 8000a50:	6a39      	ldr	r1, [r7, #32]
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <display_number+0xac>)
 8000a54:	fb83 2301 	smull	r2, r3, r3, r1
 8000a58:	109a      	asrs	r2, r3, #2
 8000a5a:	17cb      	asrs	r3, r1, #31
 8000a5c:	1ad2      	subs	r2, r2, r3
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	1aca      	subs	r2, r1, r3
 8000a68:	9201      	str	r2, [sp, #4]
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff ff95 	bl	80009a4 <send_7seg>
		num /= 10;
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ae8 <display_number+0xac>)
 8000a7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000a82:	1092      	asrs	r2, r2, #2
 8000a84:	17db      	asrs	r3, r3, #31
 8000a86:	1ad3      	subs	r3, r2, r3
 8000a88:	623b      	str	r3, [r7, #32]
	for(int i=1;i<=num_digs;i++){
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dddb      	ble.n	8000a50 <display_number+0x14>
	}
	for(int i=num_digs+1;i<=8;i++){
 8000a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	e014      	b.n	8000aca <display_number+0x8e>
		num /= 10;
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <display_number+0xac>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	1092      	asrs	r2, r2, #2
 8000aaa:	17db      	asrs	r3, r3, #31
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	623b      	str	r3, [r7, #32]
		send_7seg(gpio, DIN, CS, CLK, i, 15);
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	68b9      	ldr	r1, [r7, #8]
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff ff70 	bl	80009a4 <send_7seg>
	for(int i=num_digs+1;i<=8;i++){
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	2b08      	cmp	r3, #8
 8000ace:	dde7      	ble.n	8000aa0 <display_number+0x64>
	}
	if(num != 0)
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d002      	beq.n	8000adc <display_number+0xa0>
		return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	e000      	b.n	8000ade <display_number+0xa2>
	return 0;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	66666667 	.word	0x66666667

08000aec <read_gpio>:
#include "helper_functions.h"

int read_gpio(GPIO_TypeDef* gpio, int pin){
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
	return (gpio->IDR >> pin) & 1;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	fa22 f303 	lsr.w	r3, r2, r3
 8000b00:	f003 0301 	and.w	r3, r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <set_gpio>:
void set_gpio(GPIO_TypeDef* gpio, int pin){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	gpio->BSRR |= (1 << pin);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	683a      	ldr	r2, [r7, #0]
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	431a      	orrs	r2, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	619a      	str	r2, [r3, #24]
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <reset_gpio>:
void reset_gpio(GPIO_TypeDef* gpio, int pin){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	gpio->BRR |= (1 << pin);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	2101      	movs	r1, #1
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	431a      	orrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <num_digits>:
		loop_cnt--;
	}
	return;
}

int num_digits(int x){
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	if(x == 0){
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <num_digits+0x12>
		return 1;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e011      	b.n	8000b96 <num_digits+0x36>
	}
	int res = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
	while(x){
 8000b76:	e00a      	b.n	8000b8e <num_digits+0x2e>
		res++;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	60fb      	str	r3, [r7, #12]
		x /= 10;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <num_digits+0x44>)
 8000b82:	fb82 1203 	smull	r1, r2, r2, r3
 8000b86:	1092      	asrs	r2, r2, #2
 8000b88:	17db      	asrs	r3, r3, #31
 8000b8a:	1ad3      	subs	r3, r2, r3
 8000b8c:	607b      	str	r3, [r7, #4]
	while(x){
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d1f1      	bne.n	8000b78 <num_digits+0x18>
	}
	return res;
 8000b94:	68fb      	ldr	r3, [r7, #12]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	66666667 	.word	0x66666667

08000ba8 <init_keypad>:
	{15, 0, 14, 13}
};

// Only allow GPIOA and GPIOB for now
// Can easily extended by adding "else if" cases
int init_keypad(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(ROW_gpio==GPIOA || COL_gpio==GPIOA){
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bbc:	d003      	beq.n	8000bc6 <init_keypad+0x1e>
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bc4:	d105      	bne.n	8000bd2 <init_keypad+0x2a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000bc6:	4b52      	ldr	r3, [pc, #328]	; (8000d10 <init_keypad+0x168>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	4a51      	ldr	r2, [pc, #324]	; (8000d10 <init_keypad+0x168>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if(ROW_gpio==GPIOB || COL_gpio==GPIOB){
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	4a4f      	ldr	r2, [pc, #316]	; (8000d14 <init_keypad+0x16c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d003      	beq.n	8000be2 <init_keypad+0x3a>
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	4a4d      	ldr	r2, [pc, #308]	; (8000d14 <init_keypad+0x16c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d105      	bne.n	8000bee <init_keypad+0x46>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000be2:	4b4b      	ldr	r3, [pc, #300]	; (8000d10 <init_keypad+0x168>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	4a4a      	ldr	r2, [pc, #296]	; (8000d10 <init_keypad+0x168>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
 8000bf2:	e052      	b.n	8000c9a <init_keypad+0xf2>
		// Set GPIO pins to output mode (01)
		COL_gpio->MODER &= ~(0b11 << (2*(COL_pin+a)));
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6839      	ldr	r1, [r7, #0]
 8000bfa:	697a      	ldr	r2, [r7, #20]
 8000bfc:	440a      	add	r2, r1
 8000bfe:	0052      	lsls	r2, r2, #1
 8000c00:	2103      	movs	r1, #3
 8000c02:	fa01 f202 	lsl.w	r2, r1, r2
 8000c06:	43d2      	mvns	r2, r2
 8000c08:	401a      	ands	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	601a      	str	r2, [r3, #0]
		COL_gpio->MODER |= (0b01 << (2*(COL_pin+a)));
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	6839      	ldr	r1, [r7, #0]
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	440a      	add	r2, r1
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to very high speed mode (11)
		COL_gpio->OSPEEDR &= ~(0b11 << (2*(COL_pin+a)));
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	6839      	ldr	r1, [r7, #0]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	440a      	add	r2, r1
 8000c30:	0052      	lsls	r2, r2, #1
 8000c32:	2103      	movs	r1, #3
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	609a      	str	r2, [r3, #8]
		COL_gpio->OSPEEDR |= (0b11 << (2*(COL_pin+a)));
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	6839      	ldr	r1, [r7, #0]
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	440a      	add	r2, r1
 8000c4a:	0052      	lsls	r2, r2, #1
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c52:	431a      	orrs	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	609a      	str	r2, [r3, #8]
		// Set GPIO pins to open drain mode (1)
		COL_gpio->OTYPER &= ~(0b1 << (COL_pin+a));
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	6839      	ldr	r1, [r7, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	440a      	add	r2, r1
 8000c62:	2101      	movs	r1, #1
 8000c64:	fa01 f202 	lsl.w	r2, r1, r2
 8000c68:	43d2      	mvns	r2, r2
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	605a      	str	r2, [r3, #4]
		COL_gpio->OTYPER |= (0b1 << (COL_pin+a));
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	440a      	add	r2, r1
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	431a      	orrs	r2, r3
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	605a      	str	r2, [r3, #4]
		// Set Output to high
		set_gpio(COL_gpio, COL_pin+a);
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	68b8      	ldr	r0, [r7, #8]
 8000c90:	f7ff ff3e 	bl	8000b10 <set_gpio>
	for(int a=0;a<4;a++){
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	dda9      	ble.n	8000bf4 <init_keypad+0x4c>
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	e02c      	b.n	8000d00 <init_keypad+0x158>
		// Set GPIO pins to input mode (00)
		ROW_gpio->MODER &= ~(0b11 << (2*(ROW_pin+a)));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	440a      	add	r2, r1
 8000cb0:	0052      	lsls	r2, r2, #1
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	601a      	str	r2, [r3, #0]
		ROW_gpio->MODER |= (0b00 << (2*(ROW_pin+a)));
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to Pull-Down mode (10)
		ROW_gpio->PUPDR &= ~(0b11 << (2*(ROW_pin+a)));
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	6879      	ldr	r1, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	440a      	add	r2, r1
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	2103      	movs	r1, #3
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	401a      	ands	r2, r3
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	60da      	str	r2, [r3, #12]
		ROW_gpio->PUPDR |= (0b10 << (2*(ROW_pin+a)));
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	440a      	add	r2, r1
 8000cec:	0052      	lsls	r2, r2, #1
 8000cee:	2102      	movs	r1, #2
 8000cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	60da      	str	r2, [r3, #12]
	for(int a=0;a<4;a++){
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b03      	cmp	r3, #3
 8000d04:	ddcf      	ble.n	8000ca6 <init_keypad+0xfe>
	}

	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <check_keypad_input_one>:

int check_keypad_input_one(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin, int x, int y){
 8000d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
 8000d24:	603b      	str	r3, [r7, #0]
	int cycles = 400;
 8000d26:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d2a:	617b      	str	r3, [r7, #20]
	// Set Column to push-pull mode
	COL_gpio->OTYPER &= ~(1 << (COL_pin+y));
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	6839      	ldr	r1, [r7, #0]
 8000d32:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d34:	440a      	add	r2, r1
 8000d36:	2101      	movs	r1, #1
 8000d38:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3c:	43d2      	mvns	r2, r2
 8000d3e:	401a      	ands	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	605a      	str	r2, [r3, #4]
	// Count the total number of time it is pressed in a certain period
	int cnt = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
	for(int a=0;a<cycles;a++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
 8000d4c:	e00d      	b.n	8000d6a <check_keypad_input_one+0x52>
		cnt += read_gpio(ROW_gpio, ROW_pin+x);
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d52:	4413      	add	r3, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	68f8      	ldr	r0, [r7, #12]
 8000d58:	f7ff fec8 	bl	8000aec <read_gpio>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	4413      	add	r3, r2
 8000d62:	61fb      	str	r3, [r7, #28]
	for(int a=0;a<cycles;a++){
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	3301      	adds	r3, #1
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbed      	blt.n	8000d4e <check_keypad_input_one+0x36>
	}
	// Set Column back to open drain mode
	COL_gpio->OTYPER |= (1 << (COL_pin+y));
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	6839      	ldr	r1, [r7, #0]
 8000d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d7a:	440a      	add	r2, r1
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d82:	431a      	orrs	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	605a      	str	r2, [r3, #4]
	// return if the key is pressed(1) or not(0)
	return (cnt > (cycles*0.7));
 8000d88:	69f8      	ldr	r0, [r7, #28]
 8000d8a:	f7ff fc99 	bl	80006c0 <__aeabi_i2d>
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff fc94 	bl	80006c0 <__aeabi_i2d>
 8000d98:	a30b      	add	r3, pc, #44	; (adr r3, 8000dc8 <check_keypad_input_one+0xb0>)
 8000d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9e:	f7ff fa13 	bl	80001c8 <__aeabi_dmul>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	2101      	movs	r1, #1
 8000da8:	460e      	mov	r6, r1
 8000daa:	4620      	mov	r0, r4
 8000dac:	4629      	mov	r1, r5
 8000dae:	f7ff fd6f 	bl	8000890 <__aeabi_dcmpgt>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <check_keypad_input_one+0xa4>
 8000db8:	2300      	movs	r3, #0
 8000dba:	461e      	mov	r6, r3
 8000dbc:	b2f3      	uxtb	r3, r6
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	66666666 	.word	0x66666666
 8000dcc:	3fe66666 	.word	0x3fe66666

08000dd0 <main>:
// Use to decide which part of the code will run
// Use define & ifdef to control
#define lab_keypad_single_key
// #define lab_keypad_calculator_2_operands

int main(){
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af02      	add	r7, sp, #8

#ifdef lab_keypad_single_key

	if(init_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin) != 0){
 8000dd6:	2305      	movs	r3, #5
 8000dd8:	2204      	movs	r2, #4
 8000dda:	2103      	movs	r1, #3
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <main+0x114>)
 8000dde:	f7ff fd61 	bl	80008a4 <init_7seg>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <main+0x1e>
		// Fail to init 7seg
		return -1;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dec:	e076      	b.n	8000edc <main+0x10c>
	}

	// Set Decode Mode to Code B decode mode
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_DECODE_MODE, 0xFF);
 8000dee:	23ff      	movs	r3, #255	; 0xff
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2309      	movs	r3, #9
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2305      	movs	r3, #5
 8000df8:	2204      	movs	r2, #4
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <main+0x114>)
 8000dfe:	f7ff fdd1 	bl	80009a4 <send_7seg>
	// Set Scan Limit to all digits
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_SCAN_LIMIT, 0x07);
 8000e02:	2307      	movs	r3, #7
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	230b      	movs	r3, #11
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	2204      	movs	r2, #4
 8000e0e:	2103      	movs	r1, #3
 8000e10:	4834      	ldr	r0, [pc, #208]	; (8000ee4 <main+0x114>)
 8000e12:	f7ff fdc7 	bl	80009a4 <send_7seg>
	// Wakeup 7seg
	send_7seg(SEG_gpio, DIN_pin, CS_pin, CLK_pin, SEG_ADDRESS_SHUTDOWN, 0x01);
 8000e16:	2301      	movs	r3, #1
 8000e18:	9301      	str	r3, [sp, #4]
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	2305      	movs	r3, #5
 8000e20:	2204      	movs	r2, #4
 8000e22:	2103      	movs	r1, #3
 8000e24:	482f      	ldr	r0, [pc, #188]	; (8000ee4 <main+0x114>)
 8000e26:	f7ff fdbd 	bl	80009a4 <send_7seg>

	if(init_keypad(ROW_gpio, COL_gpio, ROW_pin, COL_pin) != 0){
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e32:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <main+0x118>)
 8000e34:	f7ff feb8 	bl	8000ba8 <init_keypad>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d002      	beq.n	8000e44 <main+0x74>
		// Fail to init keypad
		return -1;
 8000e3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e42:	e04b      	b.n	8000edc <main+0x10c>
	}

	while(1){
		int input = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<4;i++){
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	e035      	b.n	8000eba <main+0xea>
			for(int j=0;j<4;j++){
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	e02c      	b.n	8000eae <main+0xde>
				if(check_keypad_input_one(ROW_gpio, COL_gpio, ROW_pin, COL_pin, i, j)){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	9301      	str	r3, [sp, #4]
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	2305      	movs	r3, #5
 8000e5e:	2203      	movs	r2, #3
 8000e60:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000e64:	4820      	ldr	r0, [pc, #128]	; (8000ee8 <main+0x118>)
 8000e66:	f7ff ff57 	bl	8000d18 <check_keypad_input_one>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d01b      	beq.n	8000ea8 <main+0xd8>
					input = 1;
 8000e70:	2301      	movs	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
					display_number(SEG_gpio, DIN_pin, CS_pin, CLK_pin, keypad[i][j], num_digits(keypad[i][j]));
 8000e74:	491d      	ldr	r1, [pc, #116]	; (8000eec <main+0x11c>)
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	009a      	lsls	r2, r3, #2
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000e82:	491a      	ldr	r1, [pc, #104]	; (8000eec <main+0x11c>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	009a      	lsls	r2, r3, #2
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fe65 	bl	8000b60 <num_digits>
 8000e96:	4603      	mov	r3, r0
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	9400      	str	r4, [sp, #0]
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	2103      	movs	r1, #3
 8000ea2:	4810      	ldr	r0, [pc, #64]	; (8000ee4 <main+0x114>)
 8000ea4:	f7ff fdca 	bl	8000a3c <display_number>
			for(int j=0;j<4;j++){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	ddcf      	ble.n	8000e54 <main+0x84>
		for(int i=0;i<4;i++){
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	ddc6      	ble.n	8000e4e <main+0x7e>
				}
			}
		}
		if(input == 0){
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1be      	bne.n	8000e44 <main+0x74>
			display_number(SEG_gpio, DIN_pin, CS_pin, CLK_pin, 0, 0);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	2305      	movs	r3, #5
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <main+0x114>)
 8000ed6:	f7ff fdb1 	bl	8000a3c <display_number>
	while(1){
 8000eda:	e7b3      	b.n	8000e44 <main+0x74>
#endif

	while(1){}

	return 0;
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	48000800 	.word	0x48000800
 8000ee8:	48000400 	.word	0x48000400
 8000eec:	08001044 	.word	0x08001044

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f83e 	bl	8000fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f6c:	f7ff ffea 	bl	8000f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	; (8000fb4 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f000 f825 	bl	8000fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f9a:	f7ff ff19 	bl	8000dd0 <main>

08000f9e <LoopForever>:

LoopForever:
    b LoopForever
 8000f9e:	e7fe      	b.n	8000f9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000fac:	0800108c 	.word	0x0800108c
  ldr r2, =_sbss
 8000fb0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000fb4:	20000024 	.word	0x20000024

08000fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC1_2_IRQHandler>
	...

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	20000020 	.word	0x20000020

08000fe4 <__libc_init_array>:
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	4d0d      	ldr	r5, [pc, #52]	; (800101c <__libc_init_array+0x38>)
 8000fe8:	4c0d      	ldr	r4, [pc, #52]	; (8001020 <__libc_init_array+0x3c>)
 8000fea:	1b64      	subs	r4, r4, r5
 8000fec:	10a4      	asrs	r4, r4, #2
 8000fee:	2600      	movs	r6, #0
 8000ff0:	42a6      	cmp	r6, r4
 8000ff2:	d109      	bne.n	8001008 <__libc_init_array+0x24>
 8000ff4:	4d0b      	ldr	r5, [pc, #44]	; (8001024 <__libc_init_array+0x40>)
 8000ff6:	4c0c      	ldr	r4, [pc, #48]	; (8001028 <__libc_init_array+0x44>)
 8000ff8:	f000 f818 	bl	800102c <_init>
 8000ffc:	1b64      	subs	r4, r4, r5
 8000ffe:	10a4      	asrs	r4, r4, #2
 8001000:	2600      	movs	r6, #0
 8001002:	42a6      	cmp	r6, r4
 8001004:	d105      	bne.n	8001012 <__libc_init_array+0x2e>
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	f855 3b04 	ldr.w	r3, [r5], #4
 800100c:	4798      	blx	r3
 800100e:	3601      	adds	r6, #1
 8001010:	e7ee      	b.n	8000ff0 <__libc_init_array+0xc>
 8001012:	f855 3b04 	ldr.w	r3, [r5], #4
 8001016:	4798      	blx	r3
 8001018:	3601      	adds	r6, #1
 800101a:	e7f2      	b.n	8001002 <__libc_init_array+0x1e>
 800101c:	08001084 	.word	0x08001084
 8001020:	08001084 	.word	0x08001084
 8001024:	08001084 	.word	0x08001084
 8001028:	08001088 	.word	0x08001088

0800102c <_init>:
 800102c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800102e:	bf00      	nop
 8001030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001032:	bc08      	pop	{r3}
 8001034:	469e      	mov	lr, r3
 8001036:	4770      	bx	lr

08001038 <_fini>:
 8001038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103a:	bf00      	nop
 800103c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800103e:	bc08      	pop	{r3}
 8001040:	469e      	mov	lr, r3
 8001042:	4770      	bx	lr
