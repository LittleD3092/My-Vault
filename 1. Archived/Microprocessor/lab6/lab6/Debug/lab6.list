
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b4  080027b4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080027b4  080027b4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b4  080027b4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080027bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000008  080027c0  00020008  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  080027c0  00020050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000514d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fcd  00000000  00000000  00025181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000448  00000000  00000000  00026150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  00026598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb24  00000000  00000000  00026948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004485  00000000  00000000  0004346c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d9f4  00000000  00000000  000478f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001752e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011f8  00000000  00000000  00175338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800278c 	.word	0x0800278c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	0800278c 	.word	0x0800278c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <init_7seg>:
#include "7seg.h"
#include "helper_functions.h"

// Only allow GPIOA and GPIOB and GPIOC for now
// Can easily extended by adding "else if" cases
int init_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(gpio==GPIOA){
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ad8:	d106      	bne.n	8000ae8 <init_7seg+0x24>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ada:	4b37      	ldr	r3, [pc, #220]	; (8000bb8 <init_7seg+0xf4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a36      	ldr	r2, [pc, #216]	; (8000bb8 <init_7seg+0xf4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	e018      	b.n	8000b1a <init_7seg+0x56>
	}
	else if(gpio==GPIOB){
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4a34      	ldr	r2, [pc, #208]	; (8000bbc <init_7seg+0xf8>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <init_7seg+0x3a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <init_7seg+0xf4>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a30      	ldr	r2, [pc, #192]	; (8000bb8 <init_7seg+0xf4>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	e00d      	b.n	8000b1a <init_7seg+0x56>
	}
	else if(gpio==GPIOC){
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <init_7seg+0xfc>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <init_7seg+0x50>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000b06:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <init_7seg+0xf4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <init_7seg+0xf4>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	e002      	b.n	8000b1a <init_7seg+0x56>
	}
	else{
		// Error! Add other cases to suit other GPIO pins
		return -1;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b18:	e049      	b.n	8000bae <init_7seg+0xea>
	}

	// Set GPIO pins to output mode (01)
	// First Clear bits(&) then set bits(|)
	gpio->MODER &= ~(0b11 << (2*DIN));
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	68ba      	ldr	r2, [r7, #8]
 8000b20:	0052      	lsls	r2, r2, #1
 8000b22:	2103      	movs	r1, #3
 8000b24:	fa01 f202 	lsl.w	r2, r1, r2
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*DIN));
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	0052      	lsls	r2, r2, #1
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CS));
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	0052      	lsls	r2, r2, #1
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	43d2      	mvns	r2, r2
 8000b54:	401a      	ands	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CS));
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	0052      	lsls	r2, r2, #1
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f202 	lsl.w	r2, r1, r2
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	601a      	str	r2, [r3, #0]
	gpio->MODER &= ~(0b11 << (2*CLK));
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	0052      	lsls	r2, r2, #1
 8000b76:	2103      	movs	r1, #3
 8000b78:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b01 << (2*CLK));
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	0052      	lsls	r2, r2, #1
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	431a      	orrs	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	601a      	str	r2, [r3, #0]

	// Close display test
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DISPLAY_TEST, 0x00);
 8000b98:	2300      	movs	r3, #0
 8000b9a:	9301      	str	r3, [sp, #4]
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	9300      	str	r3, [sp, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	68f8      	ldr	r0, [r7, #12]
 8000ba8:	f000 f80c 	bl	8000bc4 <send_7seg>

	return 0;
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000800 	.word	0x48000800

08000bc4 <send_7seg>:

void send_7seg(GPIO_TypeDef* gpio, int DIN, int CS, int CLK, int address, int data){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
 8000bd0:	603b      	str	r3, [r7, #0]
	// The payload to send
	int payload = ((address&0xFF)<<8)|(data&0xFF);
 8000bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

	// Start the sending cycles
	// 16 data-bits + 1 CS signal
	int total_cycles = 16+1;
 8000be0:	2311      	movs	r3, #17
 8000be2:	617b      	str	r3, [r7, #20]

	for(int a=1;a<=total_cycles;a++){
 8000be4:	2301      	movs	r3, #1
 8000be6:	61fb      	str	r3, [r7, #28]
 8000be8:	e02f      	b.n	8000c4a <send_7seg+0x86>
		// Reset CLK when enter
		reset_gpio(gpio, CLK);
 8000bea:	6839      	ldr	r1, [r7, #0]
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f000 f965 	bl	8000ebc <reset_gpio>

		// Set DIN according to data except for last cycle(CS)
		if(((payload>>(total_cycles-1-a))&0x1) && a!=total_cycles){
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	1e5a      	subs	r2, r3, #1
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	fa42 f303 	asr.w	r3, r2, r3
 8000c00:	f003 0301 	and.w	r3, r3, #1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d008      	beq.n	8000c1a <send_7seg+0x56>
 8000c08:	69fa      	ldr	r2, [r7, #28]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d004      	beq.n	8000c1a <send_7seg+0x56>
			set_gpio(gpio, DIN);
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	68f8      	ldr	r0, [r7, #12]
 8000c14:	f000 f93e 	bl	8000e94 <set_gpio>
 8000c18:	e003      	b.n	8000c22 <send_7seg+0x5e>
		}
		else{
			reset_gpio(gpio, DIN);
 8000c1a:	68b9      	ldr	r1, [r7, #8]
 8000c1c:	68f8      	ldr	r0, [r7, #12]
 8000c1e:	f000 f94d 	bl	8000ebc <reset_gpio>
		}

		// Set CS at last cycle
		if(a==total_cycles){
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d104      	bne.n	8000c34 <send_7seg+0x70>
			set_gpio(gpio, CS);
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	68f8      	ldr	r0, [r7, #12]
 8000c2e:	f000 f931 	bl	8000e94 <set_gpio>
 8000c32:	e003      	b.n	8000c3c <send_7seg+0x78>
		}
		else{
			reset_gpio(gpio, CS);
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	f000 f940 	bl	8000ebc <reset_gpio>
		}

		// Set CLK when leaving (7seg set data at rising edge)
		set_gpio(gpio, CLK);
 8000c3c:	6839      	ldr	r1, [r7, #0]
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f000 f928 	bl	8000e94 <set_gpio>
	for(int a=1;a<=total_cycles;a++){
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	ddcb      	ble.n	8000bea <send_7seg+0x26>
	}

	return;
 8000c52:	bf00      	nop
}
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <init_7seg_number>:

int init_7seg_number(GPIO_TypeDef* gpio, int DIN, int CS, int CLK){
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b088      	sub	sp, #32
 8000c5e:	af02      	add	r7, sp, #8
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
	if(init_7seg(gpio, DIN, CS, CLK) != 0){
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	68f8      	ldr	r0, [r7, #12]
 8000c70:	f7ff ff28 	bl	8000ac4 <init_7seg>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <init_7seg_number+0x26>
		// Fail to init 7seg
		return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	e031      	b.n	8000ce4 <init_7seg_number+0x8a>
	}
	// Set Decode Mode to Code B decode mode
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_DECODE_MODE, 0xFF);
 8000c80:	23ff      	movs	r3, #255	; 0xff
 8000c82:	9301      	str	r3, [sp, #4]
 8000c84:	2309      	movs	r3, #9
 8000c86:	9300      	str	r3, [sp, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	68b9      	ldr	r1, [r7, #8]
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff ff98 	bl	8000bc4 <send_7seg>
	// Set Scan Limit to all digits
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_SCAN_LIMIT, 0x07);
 8000c94:	2307      	movs	r3, #7
 8000c96:	9301      	str	r3, [sp, #4]
 8000c98:	230b      	movs	r3, #11
 8000c9a:	9300      	str	r3, [sp, #0]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	68f8      	ldr	r0, [r7, #12]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <send_7seg>
	// Wakeup 7seg
	send_7seg(gpio, DIN, CS, CLK, SEG_ADDRESS_SHUTDOWN, 0x01);
 8000ca8:	2301      	movs	r3, #1
 8000caa:	9301      	str	r3, [sp, #4]
 8000cac:	230c      	movs	r3, #12
 8000cae:	9300      	str	r3, [sp, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff ff84 	bl	8000bc4 <send_7seg>
	// Clear the digits
	for(int i=1;i<=8;i++){
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	e00c      	b.n	8000cdc <init_7seg_number+0x82>
		send_7seg(gpio, DIN, CS, CLK, i, 15);
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	68b9      	ldr	r1, [r7, #8]
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f7ff ff77 	bl	8000bc4 <send_7seg>
	for(int i=1;i<=8;i++){
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	ddef      	ble.n	8000cc2 <init_7seg_number+0x68>
	}

	return 0;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <SevenSeg__construct>:
	}
}

// Constructor of SevenSeg
void SevenSeg__construct(SevenSeg* self, GPIO_TypeDef* gpio, int DIN, int CS, int CLK)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	603b      	str	r3, [r7, #0]
	self->gpio = gpio;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	601a      	str	r2, [r3, #0]
	self->DIN = DIN;
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	605a      	str	r2, [r3, #4]
	self->CS = CS;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	609a      	str	r2, [r3, #8]
	self->CLK = CLK;
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	60da      	str	r2, [r3, #12]
}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <SevenSeg__init>:

void SevenSeg__init(SevenSeg* self)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	init_7seg_number(self->gpio, self->DIN, self->CS, self->CLK);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6859      	ldr	r1, [r3, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	f7ff ff90 	bl	8000c5a <init_7seg_number>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <SevenSeg__printNum>:
// Precondition: self is a valid pointer to a SevenSeg object
//               num is an integer
// Postcondition: num is displayed on the SevenSeg, then return 0
//                if num exceeds the range of the SevenSeg, return 1
int SevenSeg__printNum(SevenSeg* self, int num)
{
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af02      	add	r7, sp, #8
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	// overflow
	if(num > 99999999 || num < -9999999)    return -1;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <SevenSeg__printNum+0x120>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	dc03      	bgt.n	8000d5e <SevenSeg__printNum+0x1a>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	4a43      	ldr	r2, [pc, #268]	; (8000e68 <SevenSeg__printNum+0x124>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	da02      	bge.n	8000d64 <SevenSeg__printNum+0x20>
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d62:	e07a      	b.n	8000e5a <SevenSeg__printNum+0x116>

	int current_digit = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
	// exact zero
	if(num == 0)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d110      	bne.n	8000d90 <SevenSeg__printNum+0x4c>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0, SEG_DATA_DECODE_0);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6818      	ldr	r0, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6859      	ldr	r1, [r3, #4]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2400      	movs	r4, #0
 8000d80:	9401      	str	r4, [sp, #4]
 8000d82:	2401      	movs	r4, #1
 8000d84:	9400      	str	r4, [sp, #0]
 8000d86:	f7ff ff1d 	bl	8000bc4 <send_7seg>
		current_digit++;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
	}

	// negative
	int negative = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
	if(num < 0)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da2e      	bge.n	8000df8 <SevenSeg__printNum+0xb4>
	{
		negative = 1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	613b      	str	r3, [r7, #16]
		num = -num;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	425b      	negs	r3, r3
 8000da2:	603b      	str	r3, [r7, #0]
	}

	// print digits
	while(num != 0)
 8000da4:	e028      	b.n	8000df8 <SevenSeg__printNum+0xb4>
	{
		int digit = num % 10;
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	4b30      	ldr	r3, [pc, #192]	; (8000e6c <SevenSeg__printNum+0x128>)
 8000daa:	fb83 1302 	smull	r1, r3, r3, r2
 8000dae:	1099      	asrs	r1, r3, #2
 8000db0:	17d3      	asrs	r3, r2, #31
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	460b      	mov	r3, r1
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	440b      	add	r3, r1
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	60fb      	str	r3, [r7, #12]
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_0+digit);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6818      	ldr	r0, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	689c      	ldr	r4, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68dd      	ldr	r5, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	9201      	str	r2, [sp, #4]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	462b      	mov	r3, r5
 8000ddc:	4622      	mov	r2, r4
 8000dde:	f7ff fef1 	bl	8000bc4 <send_7seg>
		num /= 10;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	4a21      	ldr	r2, [pc, #132]	; (8000e6c <SevenSeg__printNum+0x128>)
 8000de6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dea:	1092      	asrs	r2, r2, #2
 8000dec:	17db      	asrs	r3, r3, #31
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	603b      	str	r3, [r7, #0]
		current_digit++;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	3301      	adds	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
	while(num != 0)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1d3      	bne.n	8000da6 <SevenSeg__printNum+0x62>
	}

	// print negative sign
	if(negative)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d026      	beq.n	8000e52 <SevenSeg__printNum+0x10e>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_DASH);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6859      	ldr	r1, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689a      	ldr	r2, [r3, #8]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68dc      	ldr	r4, [r3, #12]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	250a      	movs	r5, #10
 8000e1a:	9501      	str	r5, [sp, #4]
 8000e1c:	9300      	str	r3, [sp, #0]
 8000e1e:	4623      	mov	r3, r4
 8000e20:	f7ff fed0 	bl	8000bc4 <send_7seg>
		current_digit++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
	}

	// clear remaining digits
	while(current_digit <= 7)
 8000e2a:	e012      	b.n	8000e52 <SevenSeg__printNum+0x10e>
	{
		send_7seg(self->gpio, self->DIN, self->CS, self->CLK, SEG_ADDRESS_DIGIT_0+current_digit, SEG_DATA_DECODE_BLANK);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6859      	ldr	r1, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68dc      	ldr	r4, [r3, #12]
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	250f      	movs	r5, #15
 8000e42:	9501      	str	r5, [sp, #4]
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	4623      	mov	r3, r4
 8000e48:	f7ff febc 	bl	8000bc4 <send_7seg>
		current_digit++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
	while(current_digit <= 7)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2b07      	cmp	r3, #7
 8000e56:	dde9      	ble.n	8000e2c <SevenSeg__printNum+0xe8>
	}

	return 0;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bdb0      	pop	{r4, r5, r7, pc}
 8000e62:	bf00      	nop
 8000e64:	05f5e0ff 	.word	0x05f5e0ff
 8000e68:	ff676981 	.word	0xff676981
 8000e6c:	66666667 	.word	0x66666667

08000e70 <read_gpio>:
#include "helper_functions.h"

int read_gpio(GPIO_TypeDef* gpio, int pin){
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	return (gpio->IDR >> pin) & 1;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691a      	ldr	r2, [r3, #16]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	f003 0301 	and.w	r3, r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <set_gpio>:
void set_gpio(GPIO_TypeDef* gpio, int pin){
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
	gpio->BSRR |= (1 << pin);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eaa:	431a      	orrs	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	619a      	str	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <reset_gpio>:
void reset_gpio(GPIO_TypeDef* gpio, int pin){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	gpio->BRR |= (1 << pin);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eca:	2101      	movs	r1, #1
 8000ecc:	683a      	ldr	r2, [r7, #0]
 8000ece:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <set_push>:
	else{
		reset_gpio(gpio, pin);
	}
}

void set_push(GPIO_TypeDef* gpio, int pin){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	gpio->OTYPER &= ~(1 << pin);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	43d2      	mvns	r2, r2
 8000efc:	401a      	ands	r2, r3
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <reset_push>:
void reset_push(GPIO_TypeDef* gpio, int pin){
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
	gpio->OTYPER |= (1 << pin);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	605a      	str	r2, [r3, #4]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <FPU_init>:

void FPU_init(){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	// Setup FPU
	SCB->CPACR |= (0xF << 20);
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <FPU_init+0x2c>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a08      	ldr	r2, [pc, #32]	; (8000f64 <FPU_init+0x2c>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
	__DSB();
	__ISB();
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <delay_without_interrupt>:

void delay_without_interrupt(float msec){
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	ed87 0a01 	vstr	s0, [r7, #4]
	int loop_cnt = 500*msec;
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000fa4 <delay_without_interrupt+0x3c>
 8000f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 3a90 	vmov	r3, s15
 8000f86:	60fb      	str	r3, [r7, #12]
	while(loop_cnt){
 8000f88:	e002      	b.n	8000f90 <delay_without_interrupt+0x28>
		loop_cnt--;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	while(loop_cnt){
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <delay_without_interrupt+0x22>
	}
	return;
 8000f96:	bf00      	nop
}
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	43fa0000 	.word	0x43fa0000

08000fa8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <NVIC_EnableIRQ+0x30>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <init_keypad>:
	{15, 0, 14, 13}
};

// Only allow GPIOA and GPIOB for now
// Can easily extended by adding "else if" cases
int init_keypad(GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
	// Enable AHB2 Clock
	if(ROW_gpio==GPIOA || COL_gpio==GPIOA){
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff0:	d003      	beq.n	8000ffa <init_keypad+0x1e>
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ff8:	d105      	bne.n	8001006 <init_keypad+0x2a>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <init_keypad+0x138>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <init_keypad+0x138>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
	}
	if(ROW_gpio==GPIOB || COL_gpio==GPIOB){
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4a43      	ldr	r2, [pc, #268]	; (8001118 <init_keypad+0x13c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d003      	beq.n	8001016 <init_keypad+0x3a>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4a41      	ldr	r2, [pc, #260]	; (8001118 <init_keypad+0x13c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d105      	bne.n	8001022 <init_keypad+0x46>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOBEN;
 8001016:	4b3f      	ldr	r3, [pc, #252]	; (8001114 <init_keypad+0x138>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a3e      	ldr	r2, [pc, #248]	; (8001114 <init_keypad+0x138>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e039      	b.n	800109c <init_keypad+0xc0>
		// Set GPIO pins to output mode (01)
		COL_gpio->MODER &= ~(0b11 << (2*(COL_pin+a)));
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6839      	ldr	r1, [r7, #0]
 800102e:	697a      	ldr	r2, [r7, #20]
 8001030:	440a      	add	r2, r1
 8001032:	0052      	lsls	r2, r2, #1
 8001034:	2103      	movs	r1, #3
 8001036:	fa01 f202 	lsl.w	r2, r1, r2
 800103a:	43d2      	mvns	r2, r2
 800103c:	401a      	ands	r2, r3
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	601a      	str	r2, [r3, #0]
		COL_gpio->MODER |= (0b01 << (2*(COL_pin+a)));
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6839      	ldr	r1, [r7, #0]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	440a      	add	r2, r1
 800104c:	0052      	lsls	r2, r2, #1
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	431a      	orrs	r2, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to open drain mode (1)
		COL_gpio->OTYPER &= ~(0b1 << (COL_pin+a));
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	6839      	ldr	r1, [r7, #0]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	440a      	add	r2, r1
 8001064:	2101      	movs	r1, #1
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	43d2      	mvns	r2, r2
 800106c:	401a      	ands	r2, r3
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	605a      	str	r2, [r3, #4]
		COL_gpio->OTYPER |= (0b1 << (COL_pin+a));
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	697a      	ldr	r2, [r7, #20]
 800107a:	440a      	add	r2, r1
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	431a      	orrs	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	605a      	str	r2, [r3, #4]
		// Set Output to high
		set_gpio(COL_gpio, COL_pin+a);
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	4413      	add	r3, r2
 800108e:	4619      	mov	r1, r3
 8001090:	68b8      	ldr	r0, [r7, #8]
 8001092:	f7ff feff 	bl	8000e94 <set_gpio>
	for(int a=0;a<4;a++){
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	ddc2      	ble.n	8001028 <init_keypad+0x4c>
	}

	// First Clear bits(&) then set bits(|)
	for(int a=0;a<4;a++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	e02c      	b.n	8001102 <init_keypad+0x126>
		// Set GPIO pins to input mode (00)
		ROW_gpio->MODER &= ~(0b11 << (2*(ROW_pin+a)));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6879      	ldr	r1, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	440a      	add	r2, r1
 80010b2:	0052      	lsls	r2, r2, #1
 80010b4:	2103      	movs	r1, #3
 80010b6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ba:	43d2      	mvns	r2, r2
 80010bc:	401a      	ands	r2, r3
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	601a      	str	r2, [r3, #0]
		ROW_gpio->MODER |= (0b00 << (2*(ROW_pin+a)));
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	601a      	str	r2, [r3, #0]
		// Set GPIO pins to Pull-Down mode (10)
		ROW_gpio->PUPDR &= ~(0b11 << (2*(ROW_pin+a)));
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	440a      	add	r2, r1
 80010d4:	0052      	lsls	r2, r2, #1
 80010d6:	2103      	movs	r1, #3
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	43d2      	mvns	r2, r2
 80010de:	401a      	ands	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	60da      	str	r2, [r3, #12]
		ROW_gpio->PUPDR |= (0b10 << (2*(ROW_pin+a)));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	6879      	ldr	r1, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	440a      	add	r2, r1
 80010ee:	0052      	lsls	r2, r2, #1
 80010f0:	2102      	movs	r1, #2
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	431a      	orrs	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	60da      	str	r2, [r3, #12]
	for(int a=0;a<4;a++){
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	3301      	adds	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2b03      	cmp	r3, #3
 8001106:	ddcf      	ble.n	80010a8 <init_keypad+0xcc>
	}

	return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400

0800111c <Keypad__construct>:
		}
	}
	return res;
}

void Keypad__construct(Keypad* self, GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin){
 800111c:	b480      	push	{r7}
 800111e:	b087      	sub	sp, #28
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
	self->ROW_gpio = ROW_gpio;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	68ba      	ldr	r2, [r7, #8]
 800112e:	601a      	str	r2, [r3, #0]
	self->COL_gpio = COL_gpio;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	605a      	str	r2, [r3, #4]
	self->ROW_pin = ROW_pin;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	609a      	str	r2, [r3, #8]
	self->COL_pin = COL_pin;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a3a      	ldr	r2, [r7, #32]
 8001140:	60da      	str	r2, [r3, #12]

	for(int i=0;i<4;i++){
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
 8001146:	e01d      	b.n	8001184 <Keypad__construct+0x68>
		for(int j=0;j<4;j++){
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	e014      	b.n	8001178 <Keypad__construct+0x5c>
			self->buttons[i][j] = 0;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	0091      	lsls	r1, r2, #2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	440a      	add	r2, r1
 8001158:	3204      	adds	r2, #4
 800115a:	2100      	movs	r1, #0
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			self->last_buttons[i][j] = 0;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	0091      	lsls	r1, r2, #2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	440a      	add	r2, r1
 800116a:	3214      	adds	r2, #20
 800116c:	2100      	movs	r1, #0
 800116e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j=0;j<4;j++){
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	3301      	adds	r3, #1
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	2b03      	cmp	r3, #3
 800117c:	dde7      	ble.n	800114e <Keypad__construct+0x32>
	for(int i=0;i<4;i++){
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3301      	adds	r3, #1
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b03      	cmp	r3, #3
 8001188:	ddde      	ble.n	8001148 <Keypad__construct+0x2c>
		}
	}
}
 800118a:	bf00      	nop
 800118c:	bf00      	nop
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <Keypad__init>:

int Keypad__init(Keypad* self)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	if(init_keypad(self->ROW_gpio, self->COL_gpio, self->ROW_pin, self->COL_pin) != 0){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6859      	ldr	r1, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	f7ff ff14 	bl	8000fdc <init_keypad>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <Keypad__init+0x28>
		return -1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	e000      	b.n	80011c2 <Keypad__init+0x2a>
	}
	return 0;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <Keypad__getChar>:
		for(int j = 0; j < 4; j++)
			self->buttons[i][j] = (input >> (i*4+j)) & 1;
}

char Keypad__getChar(Keypad* self)
{
 80011cc:	b490      	push	{r4, r7}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	char chars[4][4] = {
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <Keypad__getChar+0x6c>)
 80011d6:	f107 0408 	add.w	r4, r7, #8
 80011da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{'4', '5', '6', 'B'},
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};

	for(int i = 0; i < 4; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	e01e      	b.n	8001224 <Keypad__getChar+0x58>
		for(int j = 0; j < 4; j++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
 80011ea:	e015      	b.n	8001218 <Keypad__getChar+0x4c>
			if(self->buttons[i][j])
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	0091      	lsls	r1, r2, #2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	440a      	add	r2, r1
 80011f6:	3204      	adds	r2, #4
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <Keypad__getChar+0x46>
				return chars[i][j];
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	3320      	adds	r3, #32
 8001206:	19da      	adds	r2, r3, r7
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	4413      	add	r3, r2
 800120c:	3b18      	subs	r3, #24
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	e00c      	b.n	800122c <Keypad__getChar+0x60>
		for(int j = 0; j < 4; j++)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	3301      	adds	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2b03      	cmp	r3, #3
 800121c:	dde6      	ble.n	80011ec <Keypad__getChar+0x20>
	for(int i = 0; i < 4; i++)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3301      	adds	r3, #1
 8001222:	61fb      	str	r3, [r7, #28]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	2b03      	cmp	r3, #3
 8001228:	dddd      	ble.n	80011e6 <Keypad__getChar+0x1a>

	return 0;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bc90      	pop	{r4, r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	080027a4 	.word	0x080027a4

0800123c <KeypadInterrupt__construct>:

	return 0;
}

void KeypadInterrupt__construct(KeypadInterrupt* self, GPIO_TypeDef* ROW_gpio, GPIO_TypeDef* COL_gpio, int ROW_pin, int COL_pin, int EXTI_IRQn)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
	Keypad__construct(&self->base, ROW_gpio, COL_gpio, ROW_pin, COL_pin);
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	f7ff ff61 	bl	800111c <Keypad__construct>
	self->EXTI_IRQn = EXTI_IRQn;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	self->currentOutputCol = 0;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <KeypadInterrupt__init>:

int KeypadInterrupt__init(KeypadInterrupt* self)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	int statusCode = Keypad__init(&self->base);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff8a 	bl	8001198 <Keypad__init>
 8001284:	61b8      	str	r0, [r7, #24]

	// enable SYSCFG clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001286:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <KeypadInterrupt__init+0x154>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <KeypadInterrupt__init+0x154>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6613      	str	r3, [r2, #96]	; 0x60
	
	int gpioData = (&self->base)->ROW_gpio == GPIOA ? 0b0000 :
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800129a:	bf14      	ite	ne
 800129c:	2301      	movne	r3, #1
 800129e:	2300      	moveq	r3, #0
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	617b      	str	r3, [r7, #20]
											  GPIOC ? 0b0010 :
											  GPIOD ? 0b0011 :
											  GPIOE ? 0b0100 :
											  GPIOF ? 0b0101 :
											  GPIOG ? 0b0110 : 0b0111;
	for(int interruptIndex = self->EXTI_IRQn; interruptIndex < self->EXTI_IRQn + 4; interruptIndex++)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	e07f      	b.n	80013ae <KeypadInterrupt__init+0x13a>
	{
		// select output gpio
		int registerIndex = interruptIndex / 4;
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da00      	bge.n	80012b6 <KeypadInterrupt__init+0x42>
 80012b4:	3303      	adds	r3, #3
 80012b6:	109b      	asrs	r3, r3, #2
 80012b8:	613b      	str	r3, [r7, #16]
		int offset = (interruptIndex % 4) * 4;
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	425a      	negs	r2, r3
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	f002 0203 	and.w	r2, r2, #3
 80012c6:	bf58      	it	pl
 80012c8:	4253      	negpl	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	60fb      	str	r3, [r7, #12]
		SYSCFG->EXTICR[registerIndex] &= ~(0b0111 << offset);
 80012ce:	4a3f      	ldr	r2, [pc, #252]	; (80013cc <KeypadInterrupt__init+0x158>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	3302      	adds	r3, #2
 80012d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d8:	2107      	movs	r1, #7
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	43d2      	mvns	r2, r2
 80012e2:	493a      	ldr	r1, [pc, #232]	; (80013cc <KeypadInterrupt__init+0x158>)
 80012e4:	401a      	ands	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	3302      	adds	r3, #2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SYSCFG->EXTICR[registerIndex] |= (gpioData << offset);
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <KeypadInterrupt__init+0x158>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	6979      	ldr	r1, [r7, #20]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001300:	4932      	ldr	r1, [pc, #200]	; (80013cc <KeypadInterrupt__init+0x158>)
 8001302:	431a      	orrs	r2, r3
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	3302      	adds	r3, #2
 8001308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// enable interrupt
		EXTI->IMR1 |= (1 << interruptIndex);
 800130c:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <KeypadInterrupt__init+0x15c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4611      	mov	r1, r2
 800131a:	4a2d      	ldr	r2, [pc, #180]	; (80013d0 <KeypadInterrupt__init+0x15c>)
 800131c:	430b      	orrs	r3, r1
 800131e:	6013      	str	r3, [r2, #0]
		
		// enable falling edge trigger
		// EXTI->FTSR1 |= (1 << interruptIndex);

		// enable rising edge trigger
		EXTI->RTSR1 |= (1 << interruptIndex);
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <KeypadInterrupt__init+0x15c>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	2101      	movs	r1, #1
 8001326:	69fa      	ldr	r2, [r7, #28]
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	4611      	mov	r1, r2
 800132e:	4a28      	ldr	r2, [pc, #160]	; (80013d0 <KeypadInterrupt__init+0x15c>)
 8001330:	430b      	orrs	r3, r1
 8001332:	6093      	str	r3, [r2, #8]

		// enable NVIC
		if(interruptIndex == 0)                               NVIC_EnableIRQ(EXTI0_IRQn);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <KeypadInterrupt__init+0xce>
 800133a:	2006      	movs	r0, #6
 800133c:	f7ff fe34 	bl	8000fa8 <NVIC_EnableIRQ>
 8001340:	e032      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex == 1)                          NVIC_EnableIRQ(EXTI1_IRQn);
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d103      	bne.n	8001350 <KeypadInterrupt__init+0xdc>
 8001348:	2007      	movs	r0, #7
 800134a:	f7ff fe2d 	bl	8000fa8 <NVIC_EnableIRQ>
 800134e:	e02b      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex == 2)                          NVIC_EnableIRQ(EXTI2_IRQn);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d103      	bne.n	800135e <KeypadInterrupt__init+0xea>
 8001356:	2008      	movs	r0, #8
 8001358:	f7ff fe26 	bl	8000fa8 <NVIC_EnableIRQ>
 800135c:	e024      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex == 3)                          NVIC_EnableIRQ(EXTI3_IRQn);
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	2b03      	cmp	r3, #3
 8001362:	d103      	bne.n	800136c <KeypadInterrupt__init+0xf8>
 8001364:	2009      	movs	r0, #9
 8001366:	f7ff fe1f 	bl	8000fa8 <NVIC_EnableIRQ>
 800136a:	e01d      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex == 4)                          NVIC_EnableIRQ(EXTI4_IRQn);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	2b04      	cmp	r3, #4
 8001370:	d103      	bne.n	800137a <KeypadInterrupt__init+0x106>
 8001372:	200a      	movs	r0, #10
 8001374:	f7ff fe18 	bl	8000fa8 <NVIC_EnableIRQ>
 8001378:	e016      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex >= 5 && interruptIndex <= 9)   NVIC_EnableIRQ(EXTI9_5_IRQn);
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	2b04      	cmp	r3, #4
 800137e:	dd06      	ble.n	800138e <KeypadInterrupt__init+0x11a>
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	2b09      	cmp	r3, #9
 8001384:	dc03      	bgt.n	800138e <KeypadInterrupt__init+0x11a>
 8001386:	2017      	movs	r0, #23
 8001388:	f7ff fe0e 	bl	8000fa8 <NVIC_EnableIRQ>
 800138c:	e00c      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else if(interruptIndex >= 10 && interruptIndex <= 15) NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	2b09      	cmp	r3, #9
 8001392:	dd06      	ble.n	80013a2 <KeypadInterrupt__init+0x12e>
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b0f      	cmp	r3, #15
 8001398:	dc03      	bgt.n	80013a2 <KeypadInterrupt__init+0x12e>
 800139a:	2028      	movs	r0, #40	; 0x28
 800139c:	f7ff fe04 	bl	8000fa8 <NVIC_EnableIRQ>
 80013a0:	e002      	b.n	80013a8 <KeypadInterrupt__init+0x134>
		else                                                  return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a6:	e00b      	b.n	80013c0 <KeypadInterrupt__init+0x14c>
	for(int interruptIndex = self->EXTI_IRQn; interruptIndex < self->EXTI_IRQn + 4; interruptIndex++)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	3301      	adds	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b4:	3303      	adds	r3, #3
 80013b6:	69fa      	ldr	r2, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f77f af78 	ble.w	80012ae <KeypadInterrupt__init+0x3a>
	}
	return statusCode;
 80013be:	69bb      	ldr	r3, [r7, #24]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	40010400 	.word	0x40010400

080013d4 <KeypadInterrupt__shiftOutput>:

void KeypadInterrupt__shiftOutput(KeypadInterrupt* self)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
	reset_push(self->base.COL_gpio, self->currentOutputCol + self->base.COL_pin);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6858      	ldr	r0, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	4413      	add	r3, r2
 80013ec:	4619      	mov	r1, r3
 80013ee:	f7ff fd8e 	bl	8000f0e <reset_push>
	self->currentOutputCol = (self->currentOutputCol + 1) % 4;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	3301      	adds	r3, #1
 80013fa:	425a      	negs	r2, r3
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	bf58      	it	pl
 8001406:	4253      	negpl	r3, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	set_push(self->base.COL_gpio, self->currentOutputCol + self->base.COL_pin);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6858      	ldr	r0, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4413      	add	r3, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fd60 	bl	8000ee4 <set_push>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <KeypadInterrupt__callbackRefresh>:

void KeypadInterrupt__callbackRefresh(KeypadInterrupt* self)
{
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 4; i++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e024      	b.n	8001484 <KeypadInterrupt__callbackRefresh+0x58>
		for(int j = 0; j < 4; j++)
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	e01b      	b.n	8001478 <KeypadInterrupt__callbackRefresh+0x4c>
		{
			self->base.last_buttons[i][j] = self->base.buttons[i][j];
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	0091      	lsls	r1, r2, #2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	440a      	add	r2, r1
 800144a:	3204      	adds	r2, #4
 800144c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	0090      	lsls	r0, r2, #2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4402      	add	r2, r0
 800145a:	3214      	adds	r2, #20
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			self->base.buttons[i][j] = 0;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	0091      	lsls	r1, r2, #2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	440a      	add	r2, r1
 800146a:	3204      	adds	r2, #4
 800146c:	2100      	movs	r1, #0
 800146e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for(int j = 0; j < 4; j++)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	3301      	adds	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	2b03      	cmp	r3, #3
 800147c:	dde0      	ble.n	8001440 <KeypadInterrupt__callbackRefresh+0x14>
	for(int i = 0; i < 4; i++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	2b03      	cmp	r3, #3
 8001488:	ddd7      	ble.n	800143a <KeypadInterrupt__callbackRefresh+0xe>
		}
	for(int i = 0; i < 4; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	e016      	b.n	80014be <KeypadInterrupt__callbackRefresh+0x92>
	{
		self->base.buttons[i][self->currentOutputCol] = read_gpio(self->base.ROW_gpio, self->base.ROW_pin + i);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	441a      	add	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80014a2:	4611      	mov	r1, r2
 80014a4:	f7ff fce4 	bl	8000e70 <read_gpio>
 80014a8:	4601      	mov	r1, r0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4422      	add	r2, r4
 80014b2:	3204      	adds	r2, #4
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i < 4; i++)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3301      	adds	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	dde5      	ble.n	8001490 <KeypadInterrupt__callbackRefresh+0x64>
	}
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	371c      	adds	r7, #28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd90      	pop	{r4, r7, pc}

080014ce <KeypadInterrupt__getChar>:

char KeypadInterrupt__getChar(KeypadInterrupt* self)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return Keypad__getChar(&self->base);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fe77 	bl	80011cc <Keypad__getChar>
 80014de:	4603      	mov	r3, r0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <NVIC_EnableIRQ>:
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4907      	ldr	r1, [pc, #28]	; (8001518 <NVIC_EnableIRQ+0x30>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100

0800151c <init_button>:
	return 0;
}

// Only allow GPIOC for now
// Can easily extended by adding "else if" cases
int init_button(GPIO_TypeDef* gpio, int button_pin){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
	// Enable AHB2 Clock
	if(gpio==GPIOC){
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a10      	ldr	r2, [pc, #64]	; (800156c <init_button+0x50>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d116      	bne.n	800155c <init_button+0x40>
		RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <init_button+0x54>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <init_button+0x54>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
		return -1;
	}

	// Set GPIO pins to input mode (00)
	// First Clear bits(&) then set bits(|)
	gpio->MODER &= ~(0b11 << (2*button_pin));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	0052      	lsls	r2, r2, #1
 8001542:	2103      	movs	r1, #3
 8001544:	fa01 f202 	lsl.w	r2, r1, r2
 8001548:	43d2      	mvns	r2, r2
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	601a      	str	r2, [r3, #0]
	gpio->MODER |= (0b00 << (2*button_pin));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	601a      	str	r2, [r3, #0]

	return 0;
 8001558:	2300      	movs	r3, #0
 800155a:	e001      	b.n	8001560 <init_button+0x44>
		return -1;
 800155c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	48000800 	.word	0x48000800
 8001570:	40021000 	.word	0x40021000
 8001574:	00000000 	.word	0x00000000

08001578 <Button__construct>:

void Led__toggle(Led* led){
	toggle_output(led->gpio, led->pin);
}

void Button__construct(Button* button, GPIO_TypeDef* gpio, int pin){
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
	button->gpio = gpio;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	601a      	str	r2, [r3, #0]
	button->pin = pin;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	605a      	str	r2, [r3, #4]
	button->state = 0;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
	button->last_state = 0;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]

	button->debounce_cycles = 100;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2264      	movs	r2, #100	; 0x64
 80015a0:	611a      	str	r2, [r3, #16]
	button->debounce_threshold = button->debounce_cycles * 0.7;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe ff60 	bl	800046c <__aeabi_i2d>
 80015ac:	a308      	add	r3, pc, #32	; (adr r3, 80015d0 <Button__construct+0x58>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7fe ffc5 	bl	8000540 <__aeabi_dmul>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fa59 	bl	8000a74 <__aeabi_d2iz>
 80015c2:	4602      	mov	r2, r0
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	615a      	str	r2, [r3, #20]
}
 80015c8:	bf00      	nop
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	66666666 	.word	0x66666666
 80015d4:	3fe66666 	.word	0x3fe66666

080015d8 <Button__init>:

int Button__init(Button* button){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	if(init_button(button->gpio, button->pin) != 0){
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff ff96 	bl	800151c <init_button>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <Button__init+0x24>
		// Fail to init button
		return -1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015fa:	e000      	b.n	80015fe <Button__init+0x26>
	}
	return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <Button__read>:

int Button__read(Button* button){
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
	int cnt=0;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
	for(int a=0;a<button->debounce_cycles;a++){
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	e014      	b.n	8001642 <Button__read+0x3c>
		if(read_gpio(button->gpio, button->pin)==0){
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fc24 	bl	8000e70 <read_gpio>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <Button__read+0x2e>
			cnt++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3301      	adds	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
		}
		delay_without_interrupt(1);
 8001634:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001638:	f7ff fc96 	bl	8000f68 <delay_without_interrupt>
	for(int a=0;a<button->debounce_cycles;a++){
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3301      	adds	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbe5      	blt.n	8001618 <Button__read+0x12>
	}
	if(cnt>button->debounce_threshold)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	429a      	cmp	r2, r3
 8001654:	dd01      	ble.n	800165a <Button__read+0x54>
		return 1;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <Button__read+0x56>
	else
		return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <ButtonInterrupt__construct>:
	button->last_state = button->state;
	button->state = Button__read(button);
	return !button->state && button->last_state;
}

void ButtonInterrupt__construct(ButtonInterrupt* button, GPIO_TypeDef* gpio, int pin, int EXTI_IRQn){
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
	Button__construct(&button->base, gpio, pin);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff7d 	bl	8001578 <Button__construct>
	button->EXTI_IRQn = EXTI_IRQn;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	619a      	str	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <ButtonInterrupt__init>:

int ButtonInterrupt__init(ButtonInterrupt* button)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	Button__init(&button->base);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff9e 	bl	80015d8 <Button__init>
	// Enable SYSCFG Clock
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <ButtonInterrupt__init+0x1a0>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	4a62      	ldr	r2, [pc, #392]	; (800182c <ButtonInterrupt__init+0x1a0>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6613      	str	r3, [r2, #96]	; 0x60

	int gpioData = (&button->base)->gpio == GPIOA ? 0b0000 :
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016b0:	d02b      	beq.n	800170a <ButtonInterrupt__init+0x7e>
	               (&button->base)->gpio == GPIOB ? 0b0001 :
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a5e      	ldr	r2, [pc, #376]	; (8001830 <ButtonInterrupt__init+0x1a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d024      	beq.n	8001706 <ButtonInterrupt__init+0x7a>
				   (&button->base)->gpio == GPIOC ? 0b0010 :
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5c      	ldr	r2, [pc, #368]	; (8001834 <ButtonInterrupt__init+0x1a8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <ButtonInterrupt__init+0x76>
				   (&button->base)->gpio == GPIOD ? 0b0011 :
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a5b      	ldr	r2, [pc, #364]	; (8001838 <ButtonInterrupt__init+0x1ac>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d016      	beq.n	80016fe <ButtonInterrupt__init+0x72>
				   (&button->base)->gpio == GPIOE ? 0b0100 :
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a59      	ldr	r2, [pc, #356]	; (800183c <ButtonInterrupt__init+0x1b0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d00f      	beq.n	80016fa <ButtonInterrupt__init+0x6e>
				   (&button->base)->gpio == GPIOF ? 0b0101 :
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a58      	ldr	r2, [pc, #352]	; (8001840 <ButtonInterrupt__init+0x1b4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d008      	beq.n	80016f6 <ButtonInterrupt__init+0x6a>
				   (&button->base)->gpio == GPIOG ? 0b0110 : 0b0111;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a56      	ldr	r2, [pc, #344]	; (8001844 <ButtonInterrupt__init+0x1b8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d101      	bne.n	80016f2 <ButtonInterrupt__init+0x66>
 80016ee:	2306      	movs	r3, #6
 80016f0:	e00c      	b.n	800170c <ButtonInterrupt__init+0x80>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00a      	b.n	800170c <ButtonInterrupt__init+0x80>
				   (&button->base)->gpio == GPIOF ? 0b0101 :
 80016f6:	2305      	movs	r3, #5
 80016f8:	e008      	b.n	800170c <ButtonInterrupt__init+0x80>
				   (&button->base)->gpio == GPIOE ? 0b0100 :
 80016fa:	2304      	movs	r3, #4
 80016fc:	e006      	b.n	800170c <ButtonInterrupt__init+0x80>
				   (&button->base)->gpio == GPIOD ? 0b0011 :
 80016fe:	2303      	movs	r3, #3
 8001700:	e004      	b.n	800170c <ButtonInterrupt__init+0x80>
				   (&button->base)->gpio == GPIOC ? 0b0010 :
 8001702:	2302      	movs	r3, #2
 8001704:	e002      	b.n	800170c <ButtonInterrupt__init+0x80>
	               (&button->base)->gpio == GPIOB ? 0b0001 :
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <ButtonInterrupt__init+0x80>
	int gpioData = (&button->base)->gpio == GPIOA ? 0b0000 :
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]

	// select output gpio
	int registerIndex = button->EXTI_IRQn / 4;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da00      	bge.n	8001718 <ButtonInterrupt__init+0x8c>
 8001716:	3303      	adds	r3, #3
 8001718:	109b      	asrs	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]
	int offset = (button->EXTI_IRQn % 4) * 4;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	425a      	negs	r2, r3
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	bf58      	it	pl
 800172c:	4253      	negpl	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	60fb      	str	r3, [r7, #12]
	SYSCFG->EXTICR[registerIndex] &= ~(0b0111 << offset);
 8001732:	4a45      	ldr	r2, [pc, #276]	; (8001848 <ButtonInterrupt__init+0x1bc>)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	3302      	adds	r3, #2
 8001738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173c:	2107      	movs	r1, #7
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	43d2      	mvns	r2, r2
 8001746:	4940      	ldr	r1, [pc, #256]	; (8001848 <ButtonInterrupt__init+0x1bc>)
 8001748:	401a      	ands	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3302      	adds	r3, #2
 800174e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SYSCFG->EXTICR[registerIndex] |= (gpioData << offset);
 8001752:	4a3d      	ldr	r2, [pc, #244]	; (8001848 <ButtonInterrupt__init+0x1bc>)
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	3302      	adds	r3, #2
 8001758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800175c:	6979      	ldr	r1, [r7, #20]
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	fa01 f202 	lsl.w	r2, r1, r2
 8001764:	4938      	ldr	r1, [pc, #224]	; (8001848 <ButtonInterrupt__init+0x1bc>)
 8001766:	431a      	orrs	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	3302      	adds	r3, #2
 800176c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	// enable interrupt
	EXTI->IMR1 |= (1 << button->EXTI_IRQn);
 8001770:	4b36      	ldr	r3, [pc, #216]	; (800184c <ButtonInterrupt__init+0x1c0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6992      	ldr	r2, [r2, #24]
 8001778:	2101      	movs	r1, #1
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	4611      	mov	r1, r2
 8001780:	4a32      	ldr	r2, [pc, #200]	; (800184c <ButtonInterrupt__init+0x1c0>)
 8001782:	430b      	orrs	r3, r1
 8001784:	6013      	str	r3, [r2, #0]
	
	// enable falling edge trigger
	// EXTI->FTSR1 |= (1 << button->EXTI_IRQn);

	// enable rising edge trigger
	EXTI->RTSR1 |= (1 << button->EXTI_IRQn);
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <ButtonInterrupt__init+0x1c0>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6992      	ldr	r2, [r2, #24]
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f202 	lsl.w	r2, r1, r2
 8001794:	4611      	mov	r1, r2
 8001796:	4a2d      	ldr	r2, [pc, #180]	; (800184c <ButtonInterrupt__init+0x1c0>)
 8001798:	430b      	orrs	r3, r1
 800179a:	6093      	str	r3, [r2, #8]

	// enable NVIC
	if(button->EXTI_IRQn == 0)                                  NVIC_EnableIRQ(EXTI0_IRQn);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d103      	bne.n	80017ac <ButtonInterrupt__init+0x120>
 80017a4:	2006      	movs	r0, #6
 80017a6:	f7ff fe9f 	bl	80014e8 <NVIC_EnableIRQ>
 80017aa:	e03a      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn == 1)                             NVIC_EnableIRQ(EXTI1_IRQn);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d103      	bne.n	80017bc <ButtonInterrupt__init+0x130>
 80017b4:	2007      	movs	r0, #7
 80017b6:	f7ff fe97 	bl	80014e8 <NVIC_EnableIRQ>
 80017ba:	e032      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn == 2)                             NVIC_EnableIRQ(EXTI2_IRQn);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d103      	bne.n	80017cc <ButtonInterrupt__init+0x140>
 80017c4:	2008      	movs	r0, #8
 80017c6:	f7ff fe8f 	bl	80014e8 <NVIC_EnableIRQ>
 80017ca:	e02a      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn == 3)                             NVIC_EnableIRQ(EXTI3_IRQn);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d103      	bne.n	80017dc <ButtonInterrupt__init+0x150>
 80017d4:	2009      	movs	r0, #9
 80017d6:	f7ff fe87 	bl	80014e8 <NVIC_EnableIRQ>
 80017da:	e022      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn == 4)                             NVIC_EnableIRQ(EXTI4_IRQn);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d103      	bne.n	80017ec <ButtonInterrupt__init+0x160>
 80017e4:	200a      	movs	r0, #10
 80017e6:	f7ff fe7f 	bl	80014e8 <NVIC_EnableIRQ>
 80017ea:	e01a      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn >= 5 && button->EXTI_IRQn <= 9)   NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	dd07      	ble.n	8001804 <ButtonInterrupt__init+0x178>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	dc03      	bgt.n	8001804 <ButtonInterrupt__init+0x178>
 80017fc:	2017      	movs	r0, #23
 80017fe:	f7ff fe73 	bl	80014e8 <NVIC_EnableIRQ>
 8001802:	e00e      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else if(button->EXTI_IRQn >= 10 && button->EXTI_IRQn <= 15) NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b09      	cmp	r3, #9
 800180a:	dd07      	ble.n	800181c <ButtonInterrupt__init+0x190>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b0f      	cmp	r3, #15
 8001812:	dc03      	bgt.n	800181c <ButtonInterrupt__init+0x190>
 8001814:	2028      	movs	r0, #40	; 0x28
 8001816:	f7ff fe67 	bl	80014e8 <NVIC_EnableIRQ>
 800181a:	e002      	b.n	8001822 <ButtonInterrupt__init+0x196>
	else                                                        return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001820:	e000      	b.n	8001824 <ButtonInterrupt__init+0x198>

	return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40021000 	.word	0x40021000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	48001000 	.word	0x48001000
 8001840:	48001400 	.word	0x48001400
 8001844:	48001800 	.word	0x48001800
 8001848:	40010000 	.word	0x40010000
 800184c:	40010400 	.word	0x40010400

08001850 <ButtonInterrupt__callbackRefresh>:

int ButtonInterrupt__is_released(ButtonInterrupt* button){
	return !button->base.state && button->base.last_state;
}

void ButtonInterrupt__callbackRefresh(ButtonInterrupt* button){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	button->base.last_state = button->base.state;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]
	button->base.state = Button__read(&button->base);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fecf 	bl	8001606 <Button__read>
 8001868:	4602      	mov	r2, r0
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	609a      	str	r2, [r3, #8]
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <Map_CharToNum>:

// for 7seg
SevenSeg* SevenSeg__self;

int Map_CharToNum(char c)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
	return c >= '0' && c <= '9' ? c - '0' :
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b2f      	cmp	r3, #47	; 0x2f
 8001884:	d905      	bls.n	8001892 <Map_CharToNum+0x1c>
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b39      	cmp	r3, #57	; 0x39
 800188a:	d802      	bhi.n	8001892 <Map_CharToNum+0x1c>
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3b30      	subs	r3, #48	; 0x30
 8001890:	e014      	b.n	80018bc <Map_CharToNum+0x46>
	       c >= 'A' && c <= 'D' ? c - 'A' + 10 :
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b40      	cmp	r3, #64	; 0x40
 8001896:	d905      	bls.n	80018a4 <Map_CharToNum+0x2e>
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	2b44      	cmp	r3, #68	; 0x44
 800189c:	d802      	bhi.n	80018a4 <Map_CharToNum+0x2e>
 800189e:	79fb      	ldrb	r3, [r7, #7]
 80018a0:	3b37      	subs	r3, #55	; 0x37
	return c >= '0' && c <= '9' ? c - '0' :
 80018a2:	e00b      	b.n	80018bc <Map_CharToNum+0x46>
		   c == '#' ? 14 :
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	2b23      	cmp	r3, #35	; 0x23
 80018a8:	d007      	beq.n	80018ba <Map_CharToNum+0x44>
		   c == '*' ? 15 : -1;
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b2a      	cmp	r3, #42	; 0x2a
 80018ae:	d101      	bne.n	80018b4 <Map_CharToNum+0x3e>
 80018b0:	230f      	movs	r3, #15
	return c >= '0' && c <= '9' ? c - '0' :
 80018b2:	e003      	b.n	80018bc <Map_CharToNum+0x46>
		   c == '*' ? 15 : -1;
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return c >= '0' && c <= '9' ? c - '0' :
 80018b8:	e000      	b.n	80018bc <Map_CharToNum+0x46>
		   c == '#' ? 14 :
 80018ba:	230e      	movs	r3, #14
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:
#endif

void SysTick_Handler() {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)
		KeypadInterrupt__shiftOutput(KeypadInterrupt__self);
#endif

#ifdef lab_alarm
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 80018cc:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <SysTick_Handler+0xe0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05d      	beq.n	8001994 <SysTick_Handler+0xcc>
		// Update remaining time
		remainingTime-=0.1;
 80018d8:	4b34      	ldr	r3, [pc, #208]	; (80019ac <SysTick_Handler+0xe4>)
 80018da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018de:	a32e      	add	r3, pc, #184	; (adr r3, 8001998 <SysTick_Handler+0xd0>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fc74 	bl	80001d0 <__aeabi_dsub>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	492f      	ldr	r1, [pc, #188]	; (80019ac <SysTick_Handler+0xe4>)
 80018ee:	e9c1 2300 	strd	r2, r3, [r1]
		if(remainingTime <= 0){
 80018f2:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <SysTick_Handler+0xe4>)
 80018f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	f7ff f89a 	bl	8000a38 <__aeabi_dcmple>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d006      	beq.n	8001918 <SysTick_Handler+0x50>
			remainingTime = 0;
 800190a:	4928      	ldr	r1, [pc, #160]	; (80019ac <SysTick_Handler+0xe4>)
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if(remainingTime == 0 && state == 2){
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <SysTick_Handler+0xe4>)
 800191a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	f7ff f873 	bl	8000a10 <__aeabi_dcmpeq>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00d      	beq.n	800194c <SysTick_Handler+0x84>
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <SysTick_Handler+0xe8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d109      	bne.n	800194c <SysTick_Handler+0x84>
			state = 3;
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <SysTick_Handler+0xe8>)
 800193a:	2203      	movs	r2, #3
 800193c:	601a      	str	r2, [r3, #0]
			musicCounterMs = 0;
 800193e:	491d      	ldr	r1, [pc, #116]	; (80019b4 <SysTick_Handler+0xec>)
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9c1 2300 	strd	r2, r3, [r1]
		}

		musicCounterMs += 100;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <SysTick_Handler+0xec>)
 800194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <SysTick_Handler+0xf0>)
 8001958:	f7fe fc3c 	bl	80001d4 <__adddf3>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4914      	ldr	r1, [pc, #80]	; (80019b4 <SysTick_Handler+0xec>)
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
		if(musicCounterMs >= 3423){
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <SysTick_Handler+0xec>)
 8001968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800196c:	a30c      	add	r3, pc, #48	; (adr r3, 80019a0 <SysTick_Handler+0xd8>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7ff f86b 	bl	8000a4c <__aeabi_dcmpge>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <SysTick_Handler+0xc2>
			musicCounterMs = 0;
 800197c:	490d      	ldr	r1, [pc, #52]	; (80019b4 <SysTick_Handler+0xec>)
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9c1 2300 	strd	r2, r3, [r1]
		}

		KeypadInterrupt__shiftOutput(KeypadInterrupt__self);
 800198a:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <SysTick_Handler+0xf4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd20 	bl	80013d4 <KeypadInterrupt__shiftOutput>
	}
#endif
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	9999999a 	.word	0x9999999a
 800199c:	3fb99999 	.word	0x3fb99999
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40aabe00 	.word	0x40aabe00
 80019a8:	e000e010 	.word	0xe000e010
 80019ac:	20000028 	.word	0x20000028
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000030 	.word	0x20000030
 80019b8:	40590000 	.word	0x40590000
 80019bc:	20000040 	.word	0x20000040

080019c0 <EXTI1_IRQHandler>:
}
#endif

#ifdef lab_alarm
void EXTI1_IRQHandler()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	// Check if interrupt is from EXTI1
	if(EXTI->PR1 & EXTI_PR1_PIF1){
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <EXTI1_IRQHandler+0x54>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01e      	beq.n	8001a0e <EXTI1_IRQHandler+0x4e>
		// Clear interrupt
		EXTI->PR1 = EXTI_PR1_PIF1;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <EXTI1_IRQHandler+0x54>)
 80019d2:	2202      	movs	r2, #2
 80019d4:	615a      	str	r2, [r3, #20]

		// execute state transition
		if(state == 1)
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <EXTI1_IRQHandler+0x58>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d10d      	bne.n	80019fa <EXTI1_IRQHandler+0x3a>
		{
			state = 2;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <EXTI1_IRQHandler+0x58>)
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
			remainingTime = enteredSeconds;
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <EXTI1_IRQHandler+0x5c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fd3f 	bl	800046c <__aeabi_i2d>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	490b      	ldr	r1, [pc, #44]	; (8001a20 <EXTI1_IRQHandler+0x60>)
 80019f4:	e9c1 2300 	strd	r2, r3, [r1]
		{
			state = 1;
			enteredSeconds = 0;
		}
	}
}
 80019f8:	e009      	b.n	8001a0e <EXTI1_IRQHandler+0x4e>
		else if(state == 3)
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <EXTI1_IRQHandler+0x58>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d105      	bne.n	8001a0e <EXTI1_IRQHandler+0x4e>
			state = 1;
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <EXTI1_IRQHandler+0x58>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
			enteredSeconds = 0;
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <EXTI1_IRQHandler+0x5c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40010400 	.word	0x40010400
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000038 	.word	0x20000038
 8001a20:	20000028 	.word	0x20000028

08001a24 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
	// Check if interrupt is from EXTI3
	if(EXTI->PR1 & EXTI_PR1_PIF3){
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <EXTI3_IRQHandler+0x60>)
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d022      	beq.n	8001a7c <EXTI3_IRQHandler+0x58>
		// Clear interrupt
		EXTI->PR1 = EXTI_PR1_PIF3;
 8001a36:	4b13      	ldr	r3, [pc, #76]	; (8001a84 <EXTI3_IRQHandler+0x60>)
 8001a38:	2208      	movs	r2, #8
 8001a3a:	615a      	str	r2, [r3, #20]

		// Call callback
		KeypadInterrupt__callback(KeypadInterrupt__self);
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <EXTI3_IRQHandler+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <EXTI3_IRQHandler+0x68>)
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	4610      	mov	r0, r2
 8001a46:	4798      	blx	r3
		int input = Map_CharToNum(KeypadInterrupt__getChar(KeypadInterrupt__self));
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <EXTI3_IRQHandler+0x68>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fd3e 	bl	80014ce <KeypadInterrupt__getChar>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff0e 	bl	8001876 <Map_CharToNum>
 8001a5a:	6078      	str	r0, [r7, #4]
		if(input >= 0 && state == 1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db0c      	blt.n	8001a7c <EXTI3_IRQHandler+0x58>
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <EXTI3_IRQHandler+0x6c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <EXTI3_IRQHandler+0x58>
		{
			enteredSeconds = input;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <EXTI3_IRQHandler+0x70>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6013      	str	r3, [r2, #0]
			SevenSeg__printNum(SevenSeg__self, input);
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <EXTI3_IRQHandler+0x74>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7ff f964 	bl	8000d44 <SevenSeg__printNum>
		}
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40010400 	.word	0x40010400
 8001a88:	2000003c 	.word	0x2000003c
 8001a8c:	20000040 	.word	0x20000040
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000038 	.word	0x20000038
 8001a98:	2000004c 	.word	0x2000004c

08001a9c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
	// Check if interrupt is from EXTI4
	if(EXTI->PR1 & EXTI_PR1_PIF4){
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <EXTI4_IRQHandler+0x60>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0310 	and.w	r3, r3, #16
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d022      	beq.n	8001af4 <EXTI4_IRQHandler+0x58>
		// Clear interrupt
		EXTI->PR1 = EXTI_PR1_PIF4;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <EXTI4_IRQHandler+0x60>)
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	615a      	str	r2, [r3, #20]

		// Call callback
		KeypadInterrupt__callback(KeypadInterrupt__self);
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <EXTI4_IRQHandler+0x64>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <EXTI4_IRQHandler+0x68>)
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	4610      	mov	r0, r2
 8001abe:	4798      	blx	r3
		int input = Map_CharToNum(KeypadInterrupt__getChar(KeypadInterrupt__self));
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <EXTI4_IRQHandler+0x68>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd02 	bl	80014ce <KeypadInterrupt__getChar>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fed2 	bl	8001876 <Map_CharToNum>
 8001ad2:	6078      	str	r0, [r7, #4]
		if(input >= 0 && state == 1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0c      	blt.n	8001af4 <EXTI4_IRQHandler+0x58>
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <EXTI4_IRQHandler+0x6c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <EXTI4_IRQHandler+0x58>
		{
			enteredSeconds = input;
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <EXTI4_IRQHandler+0x70>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]
			SevenSeg__printNum(SevenSeg__self, input);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <EXTI4_IRQHandler+0x74>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f928 	bl	8000d44 <SevenSeg__printNum>
		}
	}
}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40010400 	.word	0x40010400
 8001b00:	2000003c 	.word	0x2000003c
 8001b04:	20000040 	.word	0x20000040
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000038 	.word	0x20000038
 8001b10:	2000004c 	.word	0x2000004c

08001b14 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
	// Check if interrupt is from EXTI5
	if(EXTI->PR1 & EXTI_PR1_PIF5){
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	; (8001bc8 <EXTI9_5_IRQHandler+0xb4>)
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f003 0320 	and.w	r3, r3, #32
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d022      	beq.n	8001b6c <EXTI9_5_IRQHandler+0x58>
		// Clear interrupt
		EXTI->PR1 = EXTI_PR1_PIF5;
 8001b26:	4b28      	ldr	r3, [pc, #160]	; (8001bc8 <EXTI9_5_IRQHandler+0xb4>)
 8001b28:	2220      	movs	r2, #32
 8001b2a:	615a      	str	r2, [r3, #20]

		// Call callback
		KeypadInterrupt__callback(KeypadInterrupt__self);
 8001b2c:	4b27      	ldr	r3, [pc, #156]	; (8001bcc <EXTI9_5_IRQHandler+0xb8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <EXTI9_5_IRQHandler+0xbc>)
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4610      	mov	r0, r2
 8001b36:	4798      	blx	r3
		int input = Map_CharToNum(KeypadInterrupt__getChar(KeypadInterrupt__self));
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <EXTI9_5_IRQHandler+0xbc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fcc6 	bl	80014ce <KeypadInterrupt__getChar>
 8001b42:	4603      	mov	r3, r0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fe96 	bl	8001876 <Map_CharToNum>
 8001b4a:	6078      	str	r0, [r7, #4]
		if(input >= 0 && state == 1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0c      	blt.n	8001b6c <EXTI9_5_IRQHandler+0x58>
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <EXTI9_5_IRQHandler+0xc0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <EXTI9_5_IRQHandler+0x58>
		{
			enteredSeconds = input;
 8001b5a:	4a1f      	ldr	r2, [pc, #124]	; (8001bd8 <EXTI9_5_IRQHandler+0xc4>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6013      	str	r3, [r2, #0]
			SevenSeg__printNum(SevenSeg__self, input);
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <EXTI9_5_IRQHandler+0xc8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f8ec 	bl	8000d44 <SevenSeg__printNum>
		}

	}
	// Check if interrupt is from EXTI6
	if(EXTI->PR1 & EXTI_PR1_PIF6){
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <EXTI9_5_IRQHandler+0xb4>)
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d022      	beq.n	8001bbe <EXTI9_5_IRQHandler+0xaa>
		// Clear interrupt
		EXTI->PR1 = EXTI_PR1_PIF6;
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <EXTI9_5_IRQHandler+0xb4>)
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	615a      	str	r2, [r3, #20]

		// Call callback
		KeypadInterrupt__callback(KeypadInterrupt__self);
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <EXTI9_5_IRQHandler+0xb8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <EXTI9_5_IRQHandler+0xbc>)
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4610      	mov	r0, r2
 8001b88:	4798      	blx	r3
		int input = Map_CharToNum(KeypadInterrupt__getChar(KeypadInterrupt__self));
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <EXTI9_5_IRQHandler+0xbc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fc9d 	bl	80014ce <KeypadInterrupt__getChar>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fe6d 	bl	8001876 <Map_CharToNum>
 8001b9c:	6038      	str	r0, [r7, #0]
		if(input >= 0 && state == 1)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0c      	blt.n	8001bbe <EXTI9_5_IRQHandler+0xaa>
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <EXTI9_5_IRQHandler+0xc0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <EXTI9_5_IRQHandler+0xaa>
		{
			enteredSeconds = input;
 8001bac:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <EXTI9_5_IRQHandler+0xc4>)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	6013      	str	r3, [r2, #0]
			SevenSeg__printNum(SevenSeg__self, input);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <EXTI9_5_IRQHandler+0xc8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6839      	ldr	r1, [r7, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f8c3 	bl	8000d44 <SevenSeg__printNum>
		}
	}
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40010400 	.word	0x40010400
 8001bcc:	2000003c 	.word	0x2000003c
 8001bd0:	20000040 	.word	0x20000040
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000038 	.word	0x20000038
 8001bdc:	2000004c 	.word	0x2000004c

08001be0 <main>:
#endif

int main(){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0e0      	sub	sp, #384	; 0x180
 8001be4:	af02      	add	r7, sp, #8
	// Cause we want to use floating points we need to init FPU
	FPU_init();
 8001be6:	f7ff f9a7 	bl	8000f38 <FPU_init>
	}

#endif
#ifdef lab_alarm
	SystemClock SystemClock;
	SystemClock__construct(&SystemClock, 4000000, 400000); // interrupt every 0.1s
 8001bea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bee:	4a48      	ldr	r2, [pc, #288]	; (8001d10 <main+0x130>)
 8001bf0:	4948      	ldr	r1, [pc, #288]	; (8001d14 <main+0x134>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fd2b 	bl	800264e <SystemClock__construct>
	SystemClock__init(&SystemClock);
 8001bf8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fd39 	bl	8002674 <SystemClock__init>

	Speaker speaker;
	Speaker__construct(&speaker, SPEAKER_gpio, SPEAKER_pin, TIM2, 0.5);
 8001c02:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8001c06:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8001d08 <main+0x128>
 8001c0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001c14:	f000 f8f8 	bl	8001e08 <Speaker__construct>
	Speaker__init(&speaker);
 8001c18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f000 f913 	bl	8001e48 <Speaker__init>
	ToneFrequency toneFrequency;
	ToneFrequency__construct(&toneFrequency);
 8001c22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f88e 	bl	8001d48 <ToneFrequency__construct>

	SevenSeg sevenSeg;
	SevenSeg__construct(&sevenSeg, SEG_gpio, DIN_pin, CS_pin, CLK_pin);
 8001c2c:	f107 00b8 	add.w	r0, r7, #184	; 0xb8
 8001c30:	2305      	movs	r3, #5
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2304      	movs	r3, #4
 8001c36:	2203      	movs	r2, #3
 8001c38:	4937      	ldr	r1, [pc, #220]	; (8001d18 <main+0x138>)
 8001c3a:	f7ff f857 	bl	8000cec <SevenSeg__construct>
	SevenSeg__init(&sevenSeg);
 8001c3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff f86b 	bl	8000d1e <SevenSeg__init>
	SevenSeg__self = &sevenSeg;
 8001c48:	4a34      	ldr	r2, [pc, #208]	; (8001d1c <main+0x13c>)
 8001c4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c4e:	6013      	str	r3, [r2, #0]

	KeypadInterrupt keypad;
	KeypadInterrupt__construct(&keypad, ROW_gpio, COL_gpio, ROW_pin, COL_pin, 3);
 8001c50:	f107 0020 	add.w	r0, r7, #32
 8001c54:	2303      	movs	r3, #3
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2306      	movs	r3, #6
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c62:	492f      	ldr	r1, [pc, #188]	; (8001d20 <main+0x140>)
 8001c64:	f7ff faea 	bl	800123c <KeypadInterrupt__construct>
	KeypadInterrupt__init(&keypad);
 8001c68:	f107 0320 	add.w	r3, r7, #32
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb01 	bl	8001274 <KeypadInterrupt__init>
	// for interrupt callback
	KeypadInterrupt__self = &keypad;
 8001c72:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <main+0x144>)
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	6013      	str	r3, [r2, #0]
	KeypadInterrupt__callback = &KeypadInterrupt__callbackRefresh;
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <main+0x148>)
 8001c7c:	4a2b      	ldr	r2, [pc, #172]	; (8001d2c <main+0x14c>)
 8001c7e:	601a      	str	r2, [r3, #0]

	ButtonInterrupt button;
	ButtonInterrupt__construct(&button, BUTTON_gpio, BUTTON_pin, 1);
 8001c80:	1d38      	adds	r0, r7, #4
 8001c82:	2301      	movs	r3, #1
 8001c84:	220d      	movs	r2, #13
 8001c86:	4924      	ldr	r1, [pc, #144]	; (8001d18 <main+0x138>)
 8001c88:	f7ff fcec 	bl	8001664 <ButtonInterrupt__construct>
	ButtonInterrupt__init(&button);
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fcfc 	bl	800168c <ButtonInterrupt__init>
	// for interrupt callback
	ButtonInterrupt__self = &button;
 8001c94:	4a26      	ldr	r2, [pc, #152]	; (8001d30 <main+0x150>)
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	6013      	str	r3, [r2, #0]
	ButtonInterrupt__callback = &ButtonInterrupt__callbackRefresh;
 8001c9a:	4b26      	ldr	r3, [pc, #152]	; (8001d34 <main+0x154>)
 8001c9c:	4a26      	ldr	r2, [pc, #152]	; (8001d38 <main+0x158>)
 8001c9e:	601a      	str	r2, [r3, #0]

	while(1)
	{
		// enter number of seconds
		while(state == 1)
 8001ca0:	bf00      	nop
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <main+0x15c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d0fb      	beq.n	8001ca2 <main+0xc2>
		{
			// SevenSeg__printNum(&sevenSeg, enteredSeconds);
		}

		// start alarm
		SystemClock__reset(&SystemClock);
 8001caa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fd0e 	bl	80026d0 <SystemClock__reset>
		while(state == 2)
 8001cb4:	e00d      	b.n	8001cd2 <main+0xf2>
		{
			SevenSeg__printNum(&sevenSeg, remainingTime);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <main+0x160>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe fed8 	bl	8000a74 <__aeabi_d2iz>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001cca:	4611      	mov	r1, r2
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff f839 	bl	8000d44 <SevenSeg__printNum>
		while(state == 2)
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <main+0x15c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d0ed      	beq.n	8001cb6 <main+0xd6>
		}

		// ring alarm
		while(state == 3)
 8001cda:	e00d      	b.n	8001cf8 <main+0x118>
		{
			Speaker__playIphoneRingtone(&speaker, musicCounterMs);
 8001cdc:	4b19      	ldr	r3, [pc, #100]	; (8001d44 <main+0x164>)
 8001cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe fec5 	bl	8000a74 <__aeabi_d2iz>
 8001cea:	4602      	mov	r2, r0
 8001cec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001cf0:	4611      	mov	r1, r2
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f908 	bl	8001f08 <Speaker__playIphoneRingtone>
		while(state == 3)
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <main+0x15c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d0ed      	beq.n	8001cdc <main+0xfc>
		while(state == 1)
 8001d00:	e7ce      	b.n	8001ca0 <main+0xc0>
 8001d02:	bf00      	nop
 8001d04:	f3af 8000 	nop.w
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	3fe00000 	.word	0x3fe00000
 8001d10:	00061a80 	.word	0x00061a80
 8001d14:	003d0900 	.word	0x003d0900
 8001d18:	48000800 	.word	0x48000800
 8001d1c:	2000004c 	.word	0x2000004c
 8001d20:	48000400 	.word	0x48000400
 8001d24:	20000040 	.word	0x20000040
 8001d28:	2000003c 	.word	0x2000003c
 8001d2c:	0800142d 	.word	0x0800142d
 8001d30:	20000048 	.word	0x20000048
 8001d34:	20000044 	.word	0x20000044
 8001d38:	08001851 	.word	0x08001851
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	20000028 	.word	0x20000028
 8001d44:	20000030 	.word	0x20000030

08001d48 <ToneFrequency__construct>:
#include "speaker.h"

void ToneFrequency__construct(ToneFrequency* self)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    self->C4 = 261.6;
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	a325      	add	r3, pc, #148	; (adr r3, 8001de8 <ToneFrequency__construct+0xa0>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]
    self->D4 = 293.7;
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	a324      	add	r3, pc, #144	; (adr r3, 8001df0 <ToneFrequency__construct+0xa8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	e9c1 2302 	strd	r2, r3, [r1, #8]
    self->E4 = 329.6;
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	a323      	add	r3, pc, #140	; (adr r3, 8001df8 <ToneFrequency__construct+0xb0>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	e9c1 2304 	strd	r2, r3, [r1, #16]
    self->F4 = 349.2;
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	a322      	add	r3, pc, #136	; (adr r3, 8001e00 <ToneFrequency__construct+0xb8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    self->G4 = 392.0;
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <ToneFrequency__construct+0x98>)
 8001d88:	e9c1 2308 	strd	r2, r3, [r1, #32]
    self->A4 = 440.0;
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <ToneFrequency__construct+0x9c>)
 8001d94:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    self->B4 = 493.9;
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	a30b      	add	r3, pc, #44	; (adr r3, 8001dc8 <ToneFrequency__construct+0x80>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    self->B4b = 466.2;
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	a30a      	add	r3, pc, #40	; (adr r3, 8001dd0 <ToneFrequency__construct+0x88>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    self->C5 = 523.3;
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	a309      	add	r3, pc, #36	; (adr r3, 8001dd8 <ToneFrequency__construct+0x90>)
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	66666666 	.word	0x66666666
 8001dcc:	407ede66 	.word	0x407ede66
 8001dd0:	33333333 	.word	0x33333333
 8001dd4:	407d2333 	.word	0x407d2333
 8001dd8:	66666666 	.word	0x66666666
 8001ddc:	40805a66 	.word	0x40805a66
 8001de0:	40788000 	.word	0x40788000
 8001de4:	407b8000 	.word	0x407b8000
 8001de8:	9999999a 	.word	0x9999999a
 8001dec:	40705999 	.word	0x40705999
 8001df0:	33333333 	.word	0x33333333
 8001df4:	40725b33 	.word	0x40725b33
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	40749999 	.word	0x40749999
 8001e00:	33333333 	.word	0x33333333
 8001e04:	4075d333 	.word	0x4075d333

08001e08 <Speaker__construct>:

void Speaker__construct(Speaker *self, GPIO_TypeDef *gpio, int pin, TIM_TypeDef *timer, double dutyCycle)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6178      	str	r0, [r7, #20]
 8001e10:	6139      	str	r1, [r7, #16]
 8001e12:	60fa      	str	r2, [r7, #12]
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	ed87 0b00 	vstr	d0, [r7]
    self->gpio = gpio;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	601a      	str	r2, [r3, #0]
    self->pin = pin;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	605a      	str	r2, [r3, #4]
    self->timer = timer;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	609a      	str	r2, [r3, #8]
    self->dutyCycle = dutyCycle;
 8001e2c:	6979      	ldr	r1, [r7, #20]
 8001e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e32:	e9c1 2304 	strd	r2, r3, [r1, #16]
    ToneFrequency__construct(&self->toneFrequency);
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff84 	bl	8001d48 <ToneFrequency__construct>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <Speaker__init>:

int Speaker__init(Speaker *self)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    // config system clock
    SystemClock_Config(4);
 8001e50:	2004      	movs	r0, #4
 8001e52:	f000 fa49 	bl	80022e8 <SystemClock_Config>
    // self->timer->PSC = 0;

    // // timer start
    // timer_start(self->timer);

    GPIO_init_AF();
 8001e56:	f000 fb7b 	bl	8002550 <GPIO_init_AF>
    timer_enable(self->timer);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fb26 	bl	80024b0 <timer_enable>
    timer_init(self->timer, 1, 20);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2214      	movs	r2, #20
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fb43 	bl	80024f8 <timer_init>
    PWM_channel_init();
 8001e72:	f000 fb9d 	bl	80025b0 <PWM_channel_init>
    timer_start(self->timer);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fb58 	bl	8002530 <timer_start>

    return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	0000      	movs	r0, r0
 8001e8c:	0000      	movs	r0, r0
	...

08001e90 <Speaker__play>:

void Speaker__play(Speaker *self, double freq)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	ed87 0b00 	vstr	d0, [r7]
    self->timer->ARR = (int)(4000000.0 / freq);
 8001e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea0:	a117      	add	r1, pc, #92	; (adr r1, 8001f00 <Speaker__play+0x70>)
 8001ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ea6:	f7fe fc75 	bl	8000794 <__aeabi_ddiv>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fddf 	bl	8000a74 <__aeabi_d2iz>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c
    self->timer->CCR1 = (int)(self->dutyCycle * 4000000.0 / freq);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ec4:	a30e      	add	r3, pc, #56	; (adr r3, 8001f00 <Speaker__play+0x70>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb39 	bl	8000540 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eda:	f7fe fc5b 	bl	8000794 <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f7fe fdc5 	bl	8000a74 <__aeabi_d2iz>
 8001eea:	4602      	mov	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	00000000 	.word	0x00000000
 8001f04:	414e8480 	.word	0x414e8480

08001f08 <Speaker__playIphoneRingtone>:
{
    return self->dutyCycle;
}

void Speaker__playIphoneRingtone(Speaker *self, int indexMs)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0c2      	sub	sp, #264	; 0x108
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f16:	6018      	str	r0, [r3, #0]
 8001f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001f20:	6019      	str	r1, [r3, #0]
    double sheetIn1_16Note[] = 
    {
        self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.G4, self->toneFrequency.G4,
 8001f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8001f30:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f34:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001f38:	e9c1 2300 	strd	r2, r3, [r1]
        self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.G4, self->toneFrequency.G4,
 8001f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    double sheetIn1_16Note[] = 
 8001f4a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f4e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001f52:	e9c1 2302 	strd	r2, r3, [r1, #8]
        self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.G4, self->toneFrequency.G4,
 8001f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 8001f64:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f68:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001f6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.G4, self->toneFrequency.G4,
 8001f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 8001f7e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f82:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001f86:	e9c1 2306 	strd	r2, r3, [r1, #24]
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.F4, self->toneFrequency.F4,
 8001f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8001f98:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001f9c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001fa0:	e9c1 2308 	strd	r2, r3, [r1, #32]
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.F4, self->toneFrequency.F4,
 8001fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8001fb2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001fb6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001fba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.F4, self->toneFrequency.F4,
 8001fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
    double sheetIn1_16Note[] = 
 8001fcc:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001fd0:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001fd4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.F4, self->toneFrequency.F4,
 8001fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
    double sheetIn1_16Note[] = 
 8001fe6:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001fea:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8001fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.B4b,
 8001ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8002000:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002004:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002008:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.B4b,
 800200c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 800201a:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800201e:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002022:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.B4b,
 8002026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800202a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    double sheetIn1_16Note[] = 
 8002034:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002038:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 800203c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.B4b, self->toneFrequency.B4b,
 8002040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    double sheetIn1_16Note[] = 
 800204e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002052:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002056:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.G4, self->toneFrequency.G4,
 800205a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800205e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8002068:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800206c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002070:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.G4, self->toneFrequency.G4,
 8002074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8002082:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002086:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 800208a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.G4, self->toneFrequency.G4,
 800208e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 800209c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80020a0:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80020a4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
        self->toneFrequency.C5, self->toneFrequency.C5, self->toneFrequency.G4, self->toneFrequency.G4,
 80020a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 80020b6:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80020ba:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80020be:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
 80020c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020c6:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
 80020d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020da:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
 80020ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020ee:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 80020fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002102:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	f04f 0300 	mov.w	r3, #0
 800210e:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
 8002112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002116:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
 8002126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800212a:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
        //---
        0, 0, 0, 0,
        0, 0, self->toneFrequency.G4, self->toneFrequency.G4,
 800213a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800213e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 8002148:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800214c:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002150:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
        0, 0, self->toneFrequency.G4, self->toneFrequency.G4,
 8002154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 8002162:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002166:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 800216a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
 800216e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002172:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0
 8002182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002186:	f5a3 7180 	sub.w	r1, r3, #256	; 0x100
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
        0, 0, self->toneFrequency.G4, self->toneFrequency.G4,
 8002196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800219a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 80021a4:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021a8:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80021ac:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
        0, 0, self->toneFrequency.G4, self->toneFrequency.G4,
 80021b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    double sheetIn1_16Note[] = 
 80021be:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021c2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80021c6:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
        self->toneFrequency.B4b, self->toneFrequency.B4b, self->toneFrequency.C5, self->toneFrequency.C5
 80021ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    double sheetIn1_16Note[] = 
 80021d8:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021dc:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80021e0:	e9c1 2338 	strd	r2, r3, [r1, #224]	; 0xe0
        self->toneFrequency.B4b, self->toneFrequency.B4b, self->toneFrequency.C5, self->toneFrequency.C5
 80021e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80021e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
    double sheetIn1_16Note[] = 
 80021f2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80021f6:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 80021fa:	e9c1 233a 	strd	r2, r3, [r1, #232]	; 0xe8
        self->toneFrequency.B4b, self->toneFrequency.B4b, self->toneFrequency.C5, self->toneFrequency.C5
 80021fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 800220c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002210:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8002214:	e9c1 233c 	strd	r2, r3, [r1, #240]	; 0xf0
        self->toneFrequency.B4b, self->toneFrequency.B4b, self->toneFrequency.C5, self->toneFrequency.C5
 8002218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800221c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
    double sheetIn1_16Note[] = 
 8002226:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800222a:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 800222e:	e9c1 233e 	strd	r2, r3, [r1, #248]	; 0xf8
    };
    Speaker__play(self, sheetIn1_16Note[indexMs / 107]);
 8002232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <Speaker__playIphoneRingtone+0x370>)
 800223e:	fb82 1203 	smull	r1, r2, r2, r3
 8002242:	1152      	asrs	r2, r2, #5
 8002244:	17db      	asrs	r3, r3, #31
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800224c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	ed93 7b00 	vldr	d7, [r3]
 8002258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800225c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002260:	eeb0 0a47 	vmov.f32	s0, s14
 8002264:	eef0 0a67 	vmov.f32	s1, s15
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	f7ff fe11 	bl	8001e90 <Speaker__play>
 800226e:	bf00      	nop
 8002270:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	4c8f8d29 	.word	0x4c8f8d29

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <NMI_Handler+0x4>

08002282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <HardFault_Handler+0x4>

08002288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <MemManage_Handler+0x4>

0800228e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <BusFault_Handler+0x4>

08002294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <UsageFault_Handler+0x4>

0800229a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <SystemInit+0x20>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <SystemInit+0x20>)
 80022d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <SystemClock_Config>:
#include "timer.h"

// 1 6 10 16 40
void SystemClock_Config(int speed){
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	// system clock -> MSI
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 80022f0:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <SystemClock_Config+0x17c>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <SystemClock_Config+0x17c>)
 80022f6:	f023 0303 	bic.w	r3, r3, #3
 80022fa:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_MSI;
 80022fc:	4b59      	ldr	r3, [pc, #356]	; (8002464 <SystemClock_Config+0x17c>)
 80022fe:	4a59      	ldr	r2, [pc, #356]	; (8002464 <SystemClock_Config+0x17c>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	6093      	str	r3, [r2, #8]

	while(!(((RCC->CFGR & RCC_CFGR_SWS_Msk)>> RCC_CFGR_SWS_Pos) == 0));    // Make sure system clock is ready
 8002304:	bf00      	nop
 8002306:	4b57      	ldr	r3, [pc, #348]	; (8002464 <SystemClock_Config+0x17c>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f8      	bne.n	8002306 <SystemClock_Config+0x1e>

	RCC->CR &= ~RCC_CR_PLLON;                 // Disable PLL
 8002314:	4b53      	ldr	r3, [pc, #332]	; (8002464 <SystemClock_Config+0x17c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a52      	ldr	r2, [pc, #328]	; (8002464 <SystemClock_Config+0x17c>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) != 0);    // Make sure PLL is ready (unlocked)
 8002320:	bf00      	nop
 8002322:	4b50      	ldr	r3, [pc, #320]	; (8002464 <SystemClock_Config+0x17c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f9      	bne.n	8002322 <SystemClock_Config+0x3a>

	// Set PLL to MSI
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC_Msk;
 800232e:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <SystemClock_Config+0x17c>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <SystemClock_Config+0x17c>)
 8002334:	f023 0303 	bic.w	r3, r3, #3
 8002338:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_MSI;
 800233a:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <SystemClock_Config+0x17c>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4a49      	ldr	r2, [pc, #292]	; (8002464 <SystemClock_Config+0x17c>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	60d3      	str	r3, [r2, #12]

	// R / 0~3  2,4,6,8
	// N * 8~86 8~86
	// M / 0~7  1~8
	// initial
	int set_R=0, set_N=0, set_M=0;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	2300      	movs	r3, #0
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
	// Change R N M
	if(speed==40){
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b28      	cmp	r3, #40	; 0x28
 8002356:	d106      	bne.n	8002366 <SystemClock_Config+0x7e>
		set_R = 1;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
		set_N = 40;
 800235c:	2328      	movs	r3, #40	; 0x28
 800235e:	613b      	str	r3, [r7, #16]
		set_M = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e02d      	b.n	80023c2 <SystemClock_Config+0xda>
	}
	else if(speed==16){
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b10      	cmp	r3, #16
 800236a:	d106      	bne.n	800237a <SystemClock_Config+0x92>
		set_R = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
		set_N = 8;
 8002370:	2308      	movs	r3, #8
 8002372:	613b      	str	r3, [r7, #16]
		set_M = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e023      	b.n	80023c2 <SystemClock_Config+0xda>
	}
	else if(speed==10){
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b0a      	cmp	r3, #10
 800237e:	d106      	bne.n	800238e <SystemClock_Config+0xa6>
		set_R = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
		set_N = 5;
 8002384:	2305      	movs	r3, #5
 8002386:	613b      	str	r3, [r7, #16]
		set_M = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e019      	b.n	80023c2 <SystemClock_Config+0xda>
	}
	else if(speed==6){
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d106      	bne.n	80023a2 <SystemClock_Config+0xba>
		set_R = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
		set_N = 12;
 8002398:	230c      	movs	r3, #12
 800239a:	613b      	str	r3, [r7, #16]
		set_M = 3;
 800239c:	2303      	movs	r3, #3
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e00f      	b.n	80023c2 <SystemClock_Config+0xda>
	}
	else if(speed==1){
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d106      	bne.n	80023b6 <SystemClock_Config+0xce>
		set_R = 3;
 80023a8:	2303      	movs	r3, #3
 80023aa:	617b      	str	r3, [r7, #20]
		set_N = 8;
 80023ac:	2308      	movs	r3, #8
 80023ae:	613b      	str	r3, [r7, #16]
		set_M = 3;
 80023b0:	2303      	movs	r3, #3
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e005      	b.n	80023c2 <SystemClock_Config+0xda>
	}
	else{
		// Default 4 MHz
		set_R = 3;
 80023b6:	2303      	movs	r3, #3
 80023b8:	617b      	str	r3, [r7, #20]
		set_N = 8;
 80023ba:	2308      	movs	r3, #8
 80023bc:	613b      	str	r3, [r7, #16]
		set_M = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	60fb      	str	r3, [r7, #12]
	}

	// Set PLLR
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR_Msk;
 80023c2:	4b28      	ldr	r3, [pc, #160]	; (8002464 <SystemClock_Config+0x17c>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	4a27      	ldr	r2, [pc, #156]	; (8002464 <SystemClock_Config+0x17c>)
 80023c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023cc:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_R << RCC_PLLCFGR_PLLR_Pos);
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <SystemClock_Config+0x17c>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	0652      	lsls	r2, r2, #25
 80023d6:	4611      	mov	r1, r2
 80023d8:	4a22      	ldr	r2, [pc, #136]	; (8002464 <SystemClock_Config+0x17c>)
 80023da:	430b      	orrs	r3, r1
 80023dc:	60d3      	str	r3, [r2, #12]
	// Set PLLN
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_Msk;
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <SystemClock_Config+0x17c>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4a20      	ldr	r2, [pc, #128]	; (8002464 <SystemClock_Config+0x17c>)
 80023e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023e8:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_N << RCC_PLLCFGR_PLLN_Pos);
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <SystemClock_Config+0x17c>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	0212      	lsls	r2, r2, #8
 80023f2:	4611      	mov	r1, r2
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <SystemClock_Config+0x17c>)
 80023f6:	430b      	orrs	r3, r1
 80023f8:	60d3      	str	r3, [r2, #12]
	// Set PLLM
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLM_Msk;
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <SystemClock_Config+0x17c>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <SystemClock_Config+0x17c>)
 8002400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002404:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (set_M << RCC_PLLCFGR_PLLM_Pos);
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <SystemClock_Config+0x17c>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	4611      	mov	r1, r2
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <SystemClock_Config+0x17c>)
 8002412:	430b      	orrs	r3, r1
 8002414:	60d3      	str	r3, [r2, #12]

	// Enable PLLR
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <SystemClock_Config+0x17c>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <SystemClock_Config+0x17c>)
 800241c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002420:	60d3      	str	r3, [r2, #12]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <SystemClock_Config+0x17c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <SystemClock_Config+0x17c>)
 8002428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242c:	6013      	str	r3, [r2, #0]

	// system clock -> PLL
	RCC->CFGR &= ~RCC_CFGR_SW_Msk;
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <SystemClock_Config+0x17c>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <SystemClock_Config+0x17c>)
 8002434:	f023 0303 	bic.w	r3, r3, #3
 8002438:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <SystemClock_Config+0x17c>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <SystemClock_Config+0x17c>)
 8002440:	f043 0303 	orr.w	r3, r3, #3
 8002444:	6093      	str	r3, [r2, #8]

	while(!(((RCC->CFGR & RCC_CFGR_SWS_Msk)>>RCC_CFGR_SWS_Pos) == 3));    // Make sure system clock is ready
 8002446:	bf00      	nop
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <SystemClock_Config+0x17c>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	089b      	lsrs	r3, r3, #2
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b03      	cmp	r3, #3
 8002454:	d1f8      	bne.n	8002448 <SystemClock_Config+0x160>
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	371c      	adds	r7, #28
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	40021000 	.word	0x40021000

08002468 <SystemClock_Config_Interrupt>:

void SystemClock_Config_Interrupt(int speed, int load){
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
	SystemClock_Config(speed);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff38 	bl	80022e8 <SystemClock_Config>
	SysTick->LOAD = load;
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= (1 << SysTick_CTRL_CLKSOURCE_Pos);
 800247e:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (1 << SysTick_CTRL_TICKINT_Pos);
 800248a:	4b08      	ldr	r3, [pc, #32]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a07      	ldr	r2, [pc, #28]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6013      	str	r3, [r2, #0]
	SysTick->CTRL |= (1 << SysTick_CTRL_ENABLE_Pos);
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <SystemClock_Config_Interrupt+0x44>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <timer_enable>:

void timer_enable(TIM_TypeDef *timer){
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	if(timer==TIM2){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024be:	d106      	bne.n	80024ce <timer_enable+0x1e>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;    // TIM2 clock enable
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <timer_enable+0x40>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <timer_enable+0x40>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
	}
	else if(timer==TIM3){
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
	}
}
 80024cc:	e009      	b.n	80024e2 <timer_enable+0x32>
	else if(timer==TIM3){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a08      	ldr	r2, [pc, #32]	; (80024f4 <timer_enable+0x44>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d105      	bne.n	80024e2 <timer_enable+0x32>
		RCC->APB1ENR1 |= RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <timer_enable+0x40>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <timer_enable+0x40>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40000400 	.word	0x40000400

080024f8 <timer_init>:
	else if(timer==TIM3){
		RCC->APB1ENR1 &= ~RCC_APB1ENR1_TIM3EN;    // TIM3 clock enable
	}
}

void timer_init(TIM_TypeDef *timer, int psc, int arr){
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
	timer->PSC = (uint32_t)(psc-1);          // PreScalser
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	3b01      	subs	r3, #1
 8002508:	461a      	mov	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	629a      	str	r2, [r3, #40]	; 0x28
	timer->ARR = (uint32_t)(arr-1);          // Reload value
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3b01      	subs	r3, #1
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	62da      	str	r2, [r3, #44]	; 0x2c
	timer->EGR |= TIM_EGR_UG;                // Reinitialize the counter
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	615a      	str	r2, [r3, #20]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <timer_start>:
void timer_reload(TIM_TypeDef *timer){
	timer->EGR |= TIM_EGR_UG;
}
void timer_start(TIM_TypeDef *timer){
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;              // Set counter enabled
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f043 0201 	orr.w	r2, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <GPIO_init_AF>:
	timer->CR1 &= ~TIM_CR1_CEN;             // Set counter disabled
}

// USE PA0 as the PWM signal output
// USE TIM2 as clock
void GPIO_init_AF(){
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <GPIO_init_AF+0x5c>)
 8002556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002558:	4a14      	ldr	r2, [pc, #80]	; (80025ac <GPIO_init_AF+0x5c>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Set to Alternate function mode
	GPIOA->MODER &= ~GPIO_MODER_MODE0_Msk;
 8002560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (2 << GPIO_MODER_MODE0_Pos);
 8002570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6013      	str	r3, [r2, #0]
	// Set AFRL
	GPIOA->AFR[0] &= ~GPIO_AFRL_AFSEL0_Msk;
 8002580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800258a:	f023 030f 	bic.w	r3, r3, #15
 800258e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL0_Pos);
 8002590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	6213      	str	r3, [r2, #32]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <PWM_channel_init>:
void PWM_channel_init(){
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
	// p.883 915 920 924
	// PA0 for PWM
	// PWM mode 1
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1M_Msk;
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos);
 80025c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025d6:	6193      	str	r3, [r2, #24]
	// OCPreload_Enable
	TIM2->CCMR1 &= ~TIM_CCMR1_OC1PE_Msk;
 80025d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025e2:	f023 0308 	bic.w	r3, r3, #8
 80025e6:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= (1 << TIM_CCMR1_OC1PE_Pos);
 80025e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	6193      	str	r3, [r2, #24]
	// Active high for channel 1 polarity
	TIM2->CCER &= ~TIM_CCER_CC1P_Msk;
 80025f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002602:	f023 0302 	bic.w	r3, r3, #2
 8002606:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (0 << TIM_CCER_CC1P_Pos);
 8002608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	6213      	str	r3, [r2, #32]
	// Enable for channel 1 output
	TIM2->CCER &= ~TIM_CCER_CC1E_Msk;
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
	TIM2->CCER |= (1 << TIM_CCER_CC1E_Pos);
 8002624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6213      	str	r3, [r2, #32]
	// Set Compare Register
	TIM2->CCR1 = 10;
 8002634:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002638:	220a      	movs	r2, #10
 800263a:	635a      	str	r2, [r3, #52]	; 0x34
	// Set PreScaler
	TIM2->PSC = 0;
 800263c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <SystemClock__construct>:

void SystemClock__construct(SystemClock* self, int speed, int counterMax)
{
 800264e:	b480      	push	{r7}
 8002650:	b085      	sub	sp, #20
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
	self->speed = speed;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	601a      	str	r2, [r3, #0]
	self->counterMax = counterMax;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	605a      	str	r2, [r3, #4]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SystemClock__init>:

void SystemClock__init(SystemClock* self)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	if(self->counterMax == 0 || self->counterMax == -1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <SystemClock__init+0x1a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800268c:	d10b      	bne.n	80026a6 <SystemClock__init+0x32>
		SystemClock_Config(self->speed / 1000000);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a0e      	ldr	r2, [pc, #56]	; (80026cc <SystemClock__init+0x58>)
 8002694:	fb82 1203 	smull	r1, r2, r2, r3
 8002698:	1492      	asrs	r2, r2, #18
 800269a:	17db      	asrs	r3, r3, #31
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe22 	bl	80022e8 <SystemClock_Config>
 80026a4:	e00e      	b.n	80026c4 <SystemClock__init+0x50>
	else
		SystemClock_Config_Interrupt(self->speed / 1000000, self->counterMax);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a08      	ldr	r2, [pc, #32]	; (80026cc <SystemClock__init+0x58>)
 80026ac:	fb82 1203 	smull	r1, r2, r2, r3
 80026b0:	1492      	asrs	r2, r2, #18
 80026b2:	17db      	asrs	r3, r3, #31
 80026b4:	1ad2      	subs	r2, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	4619      	mov	r1, r3
 80026bc:	4610      	mov	r0, r2
 80026be:	f7ff fed3 	bl	8002468 <SystemClock_Config_Interrupt>
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <SystemClock__reset>:
{
	return self->speed / self->counterMax;
}

void SystemClock__reset(SystemClock* self)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	SysTick->VAL = 0;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SystemClock__reset+0x1c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002728 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026f4:	f7ff fde6 	bl	80022c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <LoopForever+0x6>)
  ldr r1, =_edata
 80026fa:	490d      	ldr	r1, [pc, #52]	; (8002730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <LoopForever+0xe>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002700:	e002      	b.n	8002708 <LoopCopyDataInit>

08002702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002706:	3304      	adds	r3, #4

08002708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800270c:	d3f9      	bcc.n	8002702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002710:	4c0a      	ldr	r4, [pc, #40]	; (800273c <LoopForever+0x16>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002714:	e001      	b.n	800271a <LoopFillZerobss>

08002716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002718:	3204      	adds	r2, #4

0800271a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800271c:	d3fb      	bcc.n	8002716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800271e:	f000 f811 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002722:	f7ff fa5d 	bl	8001be0 <main>

08002726 <LoopForever>:

LoopForever:
    b LoopForever
 8002726:	e7fe      	b.n	8002726 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002728:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002734:	080027bc 	.word	0x080027bc
  ldr r2, =_sbss
 8002738:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800273c:	20000050 	.word	0x20000050

08002740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_2_IRQHandler>
	...

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	4d0d      	ldr	r5, [pc, #52]	; (800277c <__libc_init_array+0x38>)
 8002748:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <__libc_init_array+0x3c>)
 800274a:	1b64      	subs	r4, r4, r5
 800274c:	10a4      	asrs	r4, r4, #2
 800274e:	2600      	movs	r6, #0
 8002750:	42a6      	cmp	r6, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	4d0b      	ldr	r5, [pc, #44]	; (8002784 <__libc_init_array+0x40>)
 8002756:	4c0c      	ldr	r4, [pc, #48]	; (8002788 <__libc_init_array+0x44>)
 8002758:	f000 f818 	bl	800278c <_init>
 800275c:	1b64      	subs	r4, r4, r5
 800275e:	10a4      	asrs	r4, r4, #2
 8002760:	2600      	movs	r6, #0
 8002762:	42a6      	cmp	r6, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f855 3b04 	ldr.w	r3, [r5], #4
 800276c:	4798      	blx	r3
 800276e:	3601      	adds	r6, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f855 3b04 	ldr.w	r3, [r5], #4
 8002776:	4798      	blx	r3
 8002778:	3601      	adds	r6, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	080027b4 	.word	0x080027b4
 8002780:	080027b4 	.word	0x080027b4
 8002784:	080027b4 	.word	0x080027b4
 8002788:	080027b8 	.word	0x080027b8

0800278c <_init>:
 800278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800278e:	bf00      	nop
 8002790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002792:	bc08      	pop	{r3}
 8002794:	469e      	mov	lr, r3
 8002796:	4770      	bx	lr

08002798 <_fini>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	bf00      	nop
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr
